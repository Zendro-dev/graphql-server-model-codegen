'use strict';
const { DOWN_MIGRATION } = require('../config/globals');
/**
 * @module - Migrations to create or to drop a table correpondant to a cassandra model.
 */
module.exports = {

  /**
   * up - Creates a table with the given attributes.
   *
   * @param  {object} zendro initialized zendro object which provides the access to different APIs
   * in zendro layers (resolvers, models, adapters) and enables graphql queries.
   */
  up: async (zendro) => {
    try{
      // get the default cassandra storage handler
      <% if(storageType === 'cassandra'){-%>
      const cassandraStorageHandler = await zendro.models.<%-nameLc-%>.storageHandler;
      <% } else { %>
      const cassandraStorageHandler = await zendro.adapters.<%-adapterName-%>.storageHandler;
      <%}-%>
      let createString = 'CREATE TABLE "<%-model_name_in_storage-%>"(<%- idAttribute -%> <%= cassandraIdAttributeType %> PRIMARY KEY';
      let indices = [];

      <% let keys = Object.keys(cassandraAttributesWithConvertedTypes) -%>
        <%for (let i=0; i< keys.length; i++) {-%>
          <% let type_seq =  cassandraAttributesWithConvertedTypes[ keys[i] ] -%>
            createString += ', "<%=  keys[i] %>" <%- type_seq -%>';
            indices.push("<%= keys[i] %>");
        <%}-%>
      createString += ");";

      await cassandraStorageHandler.execute(createString);

      let indexCreationPromises = indices.map(async (i) =>  
        await cassandraStorageHandler.execute('CREATE INDEX IF NOT EXISTS <%-model_name_in_storage-%>_' + i + '_index ON "<%-model_name_in_storage-%>" ("' + i + '");'));

      await Promise.allSettled(indexCreationPromises);
    } catch (error){
      throw new Error(error);
    }
  },

  /**
   * down - Drop a table and indices.
   *
   * @param  {object} zendro initialized zendro object which provides the access to different APIs
   * in zendro layers (resolvers, models, adapters) and enables graphql queries.
   */
  down: async (zendro) => {
    try{ 
      // get the default cassandra storage handler
      <% if(storageType === 'cassandra'){-%>
      const cassandraStorageHandler = await zendro.models.<%-nameLc-%>.storageHandler;
      <% } else { %>
      const cassandraStorageHandler = await zendro.adapters.<%-adapterName-%>.storageHandler;
      <%}-%>
      const query = 'SELECT COUNT(*) AS count FROM "<%- model_name_in_storage -%>";' ;
      let queryResult = await cassandraStorageHandler.execute(query);
      const recordsExists = parseInt(queryResult.first()['count']);
      if (recordsExists && !DOWN_MIGRATION) { 
        throw new Error(`You are trying to delete all records of <%-nameLc-%> and its associations. 
            If you are sure about this, set environment variable 'DOWN_MIGRATION' to 'true' 
            and re-execute this down-migration.`); 
      }
      await cassandraStorageHandler.execute('DROP TABLE IF EXISTS "<%-model_name_in_storage-%>"');
    } catch (error){
      throw new Error(error);
    }
  }
};
