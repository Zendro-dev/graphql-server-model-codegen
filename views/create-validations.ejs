// Delete this file, if you do not want or need any validations.
const validatorUtil = require('../utils/validatorUtil')
const Ajv = require('ajv')
const ajv = validatorUtil.addValidatorFunc(validatorUtil.addDateTimeAjvKeywords(new Ajv({allErrors:true})))

// Dear user, edit the schema to adjust it to your model
module.exports.validator_patch = function(<%- nameLc -%>){

    <%- nameLc -%>.prototype.validationControl = {
      validateForCreate: true,
      validateForUpdate: true,
      validateForDelete: false,
      validateAfterRead: false
    }

    <%- nameLc -%>.prototype.validatorSchema = {
      "$async": true,
      "type": "object",
      "properties": <%- JSON.stringify(jsonSchemaProperties) -%>
    }

    <%- nameLc -%>.prototype.asyncValidate = ajv.compile(
      <%- nameLc -%>.prototype.validatorSchema
    )

    <%- nameLc -%>.prototype.validateForCreate = async function(record) {
        return await <%- nameLc -%>.prototype.asyncValidate(record)
    }

    <%- nameLc -%>.prototype.validateForUpdate = async function(record) {
        return await <%- nameLc -%>.prototype.asyncValidate(record)
    }

    <%- nameLc -%>.prototype.validateForDelete = async function(id) {

        //TODO: on the input you have the id of the record to be deleted, no generic
        // validation checks are available. You might need to import the correspondant model
        // in order to read the whole record info and the do the validation.

        return {error: null}
    }

    <%- nameLc -%>.prototype.validateAfterRead = async function(record) {
      return await <%- nameLc -%>.prototype.asyncValidate(record)
    }

    return <%- nameLc -%>
}
