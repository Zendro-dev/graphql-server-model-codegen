'use strict';
const dict = require('../utils/graphql-sequelize-types');
const { Sequelize } = require("sequelize");
const { DOWN_MIGRATION } = require('../config/globals');
/**
 * @module - Migrations to create or to drop a table correpondant to a sequelize model.
 */
module.exports = {

  /**
   * up - Creates a table with the fields specified in the the createTable function.
   *
   * @param  {object} zendro initialized zendro object
   */
  up: async (zendro) => {
    try{
      <% if(storageType === 'sql'){-%>
      const storageHandler = await zendro.models.<%-nameLc-%>.storageHandler;
      <% } else { %>
      const storageHandler = await zendro.adapters.<%-adapterName-%>.storageHandler;
      <%}-%>
      await storageHandler.getQueryInterface()
        .createTable('<%-model_name_in_storage-%>', {
        <%- idAttribute -%>: {
          type: Sequelize<%if(idAttributeType === 'String'){%>.STRING<%}else{%>[ dict['<%= idAttributeType %>'] ]<%}-%>,
          primaryKey: true<%if(defaultId){-%>,
          autoIncrement: true
          <%}-%>
        },

        createdAt: {
          type: Sequelize.DATE
        },

        updatedAt: {
          type: Sequelize.DATE
        },

        <% let keys = Object.keys(attributes) -%>
        <%for (let i=0; i< keys.length; i++) {-%>
          <% let type_seq =  attributes[ keys[i] ] -%>
          <% let arrayType = ['[String]', '[Int]', '[Float]', '[Boolean]', '[Date]', '[Time]', '[DateTime]']-%>
          <%=  keys[i] %>: {
              type: Sequelize[ dict['<%= type_seq %>'] ]<%if(externalIds.includes(keys[i])){-%>,
              allowNull: false,
              unique: true
              <%}-%><% if( arrayType.includes(type_seq)){-%>,
              defaultValue: '[]'
              <%}-%>
          }
          <%if(i !== (keys.length -1) ){ -%>,<%}-%>
        <%}-%>

      })
      <%if(indices){ for(let i=0; i< indices.length; i++){-%>
      await storageHandler.getQueryInterface().addIndex('<%-model_name_in_storage-%>', ['<%= indices[i] %>']);
      <%}-%>   
      <%}-%>;
    } catch (error){
      throw new Error(error);
    }
  },

  /**
   * down - Drop a table.
   *
   * @param  {object} zendro initialized zendro object
   */
  down: async (zendro) => {
    try{
      <% if(storageType === 'sql'){-%>
      const storageHandler = await zendro.models.<%-nameLc-%>.storageHandler;
      const recordsExists = await zendro.models.<%-nameLc-%>.count();
      <% } else { %>
      const storageHandler = await zendro.adapters.<%-adapterName-%>.storageHandler;
      const recordsExists = await zendro.adapters.<%-adapterName-%>.count();
      <%}-%>
      if (recordsExists && !DOWN_MIGRATION) { 
        throw new Error(`You are trying to delete all records of <%-nameLc-%> and its associations. 
            If you are sure about this, set environment variable 'DOWN_MIGRATION' to 'true' 
            and re-execute this down-migration.`); 
      }
      await storageHandler.getQueryInterface().dropTable('<%-model_name_in_storage-%>');
    } catch (error){
      throw new Error(error);
    }
  }
};
