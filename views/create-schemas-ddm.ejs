module.exports = `
<%#
/**
 * Section 1
 * Model type: <name>
 *
 * <name> is equal to the given model's name. The fields of this type are the following:
 *
 *  Internal id attribute.
 *  All other attributes (non-internal-id).
 *  Associations fields.
 */
-%>
type <%- name -%>
{
<%#
/**
 * Section 1.1 - Internal id attribute.
 * Field: <idAttribute> : ID
 */
-%>
  """
  @original-field
  """
  <%- idAttribute -%>: ID

  <%#
/**
 * Section 1.2 - All other attributes (non-internal-id).
 * Fields: <nonIdAttribute> : scalar
 */
-%>
<%for(var key in attributes) {-%>
"""
  @original-field
  <%= attributesDescription[key]%>
  """
  <%= key %>: <%= attributes[key]%>
<%}-%>

<% if (cassandraRestrictions) { %>
<%#
  /**
  * The token - needed to sort data from different servers
  */
  -%>
  """
  @original-field
  """
  toke: String<% } %>
<%#
/**
 * Section 1.3 - Associations fields.
 *
 * <to_one & generic_to_one>
 * 1.3.1	assoc(search: searchAssocInput) : Assoc
 *
 * <to_many & many_to_many & generic_to_many>
 * 1.3.2	assocFilter(
 *          search: searchAssocInput,
 *          order: [orderAssocInput],
 *          pagination: paginationInput
 *        ) : [Assoc]
 * 1.3.3	assocConnection(
 *          search: searchAssocInput,
 *          order: [orderAssocInput],
 *          pagination: paginationCursorInput
 *        ) : AssocConnection"
 * 1.3.4	countFilteredAssoc(
 *          search: searchAssocInput
 *        ) : Int"
 */
-%>
<%# to_one -%>
<%for(var key in associationsArguments.schema_attributes.one){-%>
<%=key%>(search: search<%= associationsArguments.schema_attributes.one[key][1] -%>Input): <%= associationsArguments.schema_attributes.one[key][0]%>
<%}-%>
<%# to_many & many_to_many -%>
<%for(var key in associationsArguments.schema_attributes.many){-%>
  """
  @search-request
  """
  <%=key%>Connection(search: search<%= associationsArguments.schema_attributes.many[key][1] -%>Input, order: [ order<%= associationsArguments.schema_attributes.many[key][1] -%>Input ], pagination: paginationCursorInput!): <%= associationsArguments.schema_attributes.many[key][1]-%>Connection
  """
  @count-request
  """
  countFiltered<%= associationsArguments.schema_attributes.many[key][2]%>(search: search<%= associationsArguments.schema_attributes.many[key][1] -%>Input) : Int
<%}-%>

<%# generic_to_one -%>
<%for(var key in associationsArguments.schema_attributes.generic_one){-%>
  <%=key%>(search: search<%= associationsArguments.schema_attributes.generic_one[key][1] -%>Input): <%= associationsArguments.schema_attributes.generic_one[key][0]%>
<%}-%>
<%# generic_to_many -%>
<%for(var key in associationsArguments.schema_attributes.generic_many){-%>

  """
  @search-request
  """
  <%=key%>Filter(search: search<%= associationsArguments.schema_attributes.generic_many[key][1] -%>Input, order: [ order<%= associationsArguments.schema_attributes.generic_many[key][1] -%>Input ], pagination: paginationInput!): [<%= associationsArguments.schema_attributes.generic_many[key][0]-%>]


  """
  @search-request
  """
  <%=key%>Connection(search: search<%= associationsArguments.schema_attributes.generic_many[key][1] -%>Input, order: [ order<%= associationsArguments.schema_attributes.generic_many[key][1] -%>Input ], pagination: paginationCursorInput!): <%= associationsArguments.schema_attributes.generic_many[key][1]-%>Connection

  """
  @count-request
  """
  countFiltered<%= associationsArguments.schema_attributes.generic_many[key][2]%>(search: search<%= associationsArguments.schema_attributes.generic_many[key][1] -%>Input) : Int
<%}-%>
}

<%#
/**
 * Section 2
 * Inner types
 */
-%>
type <%- nameCp -%>Connection{
edges: [<%- nameCp -%>Edge]
<%- namePl -%>: [<%- name -%>]
pageInfo: pageInfo!
}

type <%- nameCp -%>Edge{
cursor: String!
node: <%- name -%>!
}

type VueTable<%- nameCp -%>{
  data : [<%- name -%>]
  total: Int
  per_page: Int
  current_page: Int
  last_page: Int
  prev_page_url: String
  next_page_url: String
  from: Int
  to: Int
}

<%#
/**
 * Section 3
 * Enum
 */
-%>
enum <%- name -%>Field {
  <%- idAttribute %>
<%for (var key in attributes) {-%>
  <%= key %>
<%}-%>
<% if (cassandraRestrictions) { -%>
  toke <%}%>
}

<%#
/**
 * Section 4
 * Input types
 */
-%>
input search<%- nameCp -%>Input {
  field: <%- name -%>Field
  value: String
  valueType: InputType
  operator: <%-operators-%>
  excludeAdapterNames: [String]
  search: [search<%- nameCp-%>Input]
}

input order<%- nameCp -%>Input{
  field: <%- name -%>Field
  order: Order
}

<%_for(let i=0; i < associationsArguments["to_one"].length; i++){_%><%_ if (associationsArguments["to_one"][i].holdsForeignKey) { _%>
input bulkAssociation<%- nameCp -%>With<%-associationsArguments["to_one"][i].targetKey_cp-%>Input{
  <%- idAttribute -%>: ID!
  <%-associationsArguments["to_one"][i].targetKey-%>: ID!
}<%_} _%><%_}%>

<%#
/**
 * Section 5
 * Query type
 */
-%>
type Query {
  readOne<%- nameCp -%>(<%- idAttribute -%>: ID!): <%- name %>
  count<%- namePlCp -%>(search: search<%- nameCp -%>Input ): Int
  vueTable<%- nameCp -%> : VueTable<%- nameCp -%>
  csvTableTemplate<%- nameCp -%>: [String]
  <%- namePl -%>Connection(search:search<%- nameCp -%>Input, order: [ order<%- nameCp -%>Input ], pagination: paginationCursorInput!): <%- nameCp -%>Connection
}
<%#
/**
 * Section 6
 * Mutation type
 */
-%>

type Mutation {
  add<%- nameCp -%>(<%if(!defaultId){-%><%- idAttribute -%>: ID!,<%}-%> <%- editableAttributesStr -%> <%for(var key in associationsArguments.schema_attributes.one){-%>, add<%= associationsArguments.schema_attributes.one[key][2]%>:ID<%}-%> <%for(var key in associationsArguments.schema_attributes.generic_one){-%>, add<%= associationsArguments.schema_attributes.generic_one[key][2]%>:ID<%}-%> <%for(var key in associationsArguments.schema_attributes.many){-%>, add<%= associationsArguments.schema_attributes.many[key][2]%>:[ID]<%}-%> <%for(var key in associationsArguments.schema_attributes.generic_many){-%>, add<%= associationsArguments.schema_attributes.generic_many[key][2]%>:[ID]<%}-%>, skipAssociationsExistenceChecks:Boolean = <%if (cassandraRestrictions) {%>true<% } else { %>false<% } %>): <%- name %>!
  update<%- nameCp -%>(<%- idAttribute -%>: ID!, <%- editableAttributesStr -%> <%for(var key in associationsArguments.schema_attributes.one){-%>, add<%= associationsArguments.schema_attributes.one[key][2]%>:ID, remove<%= associationsArguments.schema_attributes.one[key][2]%>:ID <%}-%> <%for(var key in associationsArguments.schema_attributes.generic_one){-%>, add<%= associationsArguments.schema_attributes.generic_one[key][2]%>:ID, remove<%= associationsArguments.schema_attributes.generic_one[key][2]%>:ID <%}-%> <%for(var key in associationsArguments.schema_attributes.many){-%>, add<%= associationsArguments.schema_attributes.many[key][2]%>:[ID], remove<%= associationsArguments.schema_attributes.many[key][2]%>:[ID] <%}-%> <%for(var key in associationsArguments.schema_attributes.generic_many){-%>, add<%= associationsArguments.schema_attributes.generic_many[key][2]%>:[ID], remove<%= associationsArguments.schema_attributes.generic_many[key][2]%>:[ID] <%}-%>, skipAssociationsExistenceChecks:Boolean = <%if (cassandraRestrictions) {%>true<% } else { %>false<% } %>): <%- name %>!
  delete<%- nameCp -%>(<%- idAttribute -%>: ID!): String!
  bulkAdd<%- nameCp -%>Csv: String
  <%# bulkAssociatons -%>
  <%_for(let i=0; i < associationsArguments["to_one"].length; i++){_%><%_if (associationsArguments["to_one"][i].holdsForeignKey){_%>
bulkAssociate<%-nameCp-%>With<%-associationsArguments["to_one"][i].targetKey_cp-%>(bulkAssociationInput: [bulkAssociation<%-nameCp-%>With<%-associationsArguments["to_one"][i].targetKey_cp-%>Input], skipAssociationsExistenceChecks:Boolean = false): String!
  bulkDisAssociate<%-nameCp-%>With<%-associationsArguments["to_one"][i].targetKey_cp-%>(bulkAssociationInput: [bulkAssociation<%-nameCp-%>With<%-associationsArguments["to_one"][i].targetKey_cp-%>Input], skipAssociationsExistenceChecks:Boolean = false): String!
  <%_}-%><%_}-%>}
`;
