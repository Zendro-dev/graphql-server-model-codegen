'use strict';
const { DOWN_MIGRATION } = require('../config/globals');
/**
 * @module - Migrations for mongodb.
 */
module.exports = {

  /**
   * up - Creates indices.
   *
   * @param  {object} zendro initialized zendro object
   */
  up: async (zendro) => {
    try{
      <% if(storageType === 'mongodb'){-%>
      const db = await zendro.models.<%-nameLc-%>.storageHandler;
      <% } else { %>
      const db = await zendro.adapters.<%-adapterName-%>.storageHandler;
      <%}-%>
      const collection = await db.collection("<%-model_name_in_storage-%>");
      await collection.createIndex({ <%- idAttribute -%>: 1 });
      <%if(indices){ for(let i=0; i< indices.length; i++){-%>
      await collection.createIndex({ <%= indices[i] %>: 1 });
      <%}-%>   
      <%}-%>
    } catch (error){
      throw new Error(error);
    }
  },

  /**
   * down - Drop the collection.
   *
   * @param  {object} zendro initialized zendro object
   */
  down: async (zendro) => {
    try{
    <% if(storageType === 'mongodb'){-%>
    const db = await zendro.models.<%-nameLc-%>.storageHandler;
    <% } else { %>
    const db = await zendro.adapters.<%-adapterName-%>.storageHandler;
    <%}-%>
    const collection = await db.collection("<%-model_name_in_storage-%>");
    const recordsExists = await collection.countDocuments(); 
    if (recordsExists && !DOWN_MIGRATION) { 
        throw new Error(`You are trying to delete all records of <%-nameLc-%> and its associations. 
            If you are sure about this, set environment variable 'DOWN_MIGRATION' to 'true' 
            and re-execute this down-migration.`); 
    }
    await collection.drop();
    } catch (error){
      throw new Error(error);
    }
  }
};
