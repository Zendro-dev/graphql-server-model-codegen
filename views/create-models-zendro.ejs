const _ = require('lodash');
const path = require('path');
const models = require(path.join(__dirname, '..', 'index.js'));
const axios_general = require('axios');
const FormData = require('form-data');
const fs = require('fs');
const os = require('os');
const uuidv4 = require('uuidv4').uuid;
const globals = require('../../config/globals');
const validatorUtil = require('../../utils/validatorUtil');
const helper = require('../../utils/helper');
const errorHelper = require('../../utils/errors');

// An exact copy of the the model definition that comes from the .json file
const definition = <%- definition -%>;

const remoteZendroURL = "<%- url -%>";
let axios = axios_general.create();
axios.defaults.timeout = globals.MAX_TIME_OUT;

module.exports = class <%- nameLc -%>{

  /**
   * constructor - Creates an instance of the model stored in webservice
   *
   * @param  {obejct} input    Data for the new instances. Input for each field of the model.
   */

  constructor({<%- idAttribute -%> <%for(var key in attributes){-%>,<%=key-%><%}-%>}){
      this.<%- idAttribute -%> = <%- idAttribute -%>;
       <%for(var key in attributes){-%>
         this.<%=key-%> =<%=key-%>;
        <%}-%>
  }

  static get name(){
    return "<%- nameLc -%>";
  }

  static async readById( id, benignErrorReporter){
    let query = `query readOne<%- nameCp -%>{ readOne<%- nameCp -%>(<%- idAttribute -%>: "${id}"){<%- idAttribute -%> <%for(var key in attributes){-%>
      <%=key %>
    <%}-%> } }`

    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef( benignErrorReporter );

    try {
      // Send an HTTP request to the remote server
      let response = await axios.post(remoteZendroURL, {query:query});
      //check if remote service returned benign Errors in the response and add them to the benignErrorReporter
      if(helper.isNonEmptyArray(response.data.errors)) {
        benignErrorReporter.reportError(errorHelper.handleRemoteErrors(response.data.errors, remoteZendroURL));
      }
      // STATUS-CODE is 200
      // NO ERROR as such has been detected by the server (Express)
      // check if data was send
      if (response && response.data && response.data.data) {
        let item = new <%- nameLc -%>(response.data.data.readOne<%- nameCp -%>);
        await validatorUtil.validateData('validateAfterRead', this, item);
        return item;
      } else {
        throw new Error(`Remote zendro-server (${remoteZendroURL}) did not respond with data.`);
      }
    } catch(error) {
      //handle caught errors
      errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, remoteZendroURL);
    }
  }

  static async countRecords(search, benignErrorReporter){
    let query = `query count<%- namePlCp -%>($search: search<%- nameCp -%>Input){
      count<%- namePlCp -%>(search: $search)
    }`

    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef(benignErrorReporter);

    try {
      // Send an HTTP request to the remote server
      let response = await axios.post(remoteZendroURL, {query:query, variables:{search: search}});
      //check if remote service returned benign Errors in the response and add them to the benignErrorReporter
      if(helper.isNonEmptyArray(response.data.errors)) {
        benignErrorReporter.reportError(errorHelper.handleRemoteErrors(response.data.errors, remoteZendroURL));
      }
      // STATUS-CODE is 200
      // NO ERROR as such has been detected by the server (Express)
      // check if data was send
      if(response && response.data && response.data.data) {
        return response.data.data.count<%- namePlCp -%>;
      } else {
        throw new Error(`Remote zendro-server (${remoteZendroURL}) did not respond with data.`);
      }
    } catch(error){
      //handle caught errors
      errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, remoteZendroURL);
    }
  }

  static async readAll(search, order, pagination, benignErrorReporter){
    let query = `query <%- namePl -%>($search: search<%- nameCp -%>Input $pagination: paginationInput! $order: [order<%- nameCp -%>Input]){
      <%- namePl -%>(search:$search pagination:$pagination order:$order){<%- idAttribute -%> <%for(var key in attributes){-%>
         <%=key %>
       <%}-%> } }`

    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef( benignErrorReporter );

    try {
      // Send an HTTP request to the remote server
      let response = await axios.post(remoteZendroURL, {query:query, variables: {search: search, order:order, pagination: pagination}});
      //check if remote service returned benign Errors in the response and add them to the benignErrorReporter
      if(helper.isNonEmptyArray(response.data.errors)) {
        benignErrorReporter.reportError(errorHelper.handleRemoteErrors(response.data.errors, remoteZendroURL));
      }
      // STATUS-CODE is 200
      // NO ERROR as such has been detected by the server (Express)
      // check if data was send
      if(response && response.data && response.data.data && response.data.data.<%- namePl -%> !== null) {
        let data = response.data.data.<%- namePl -%>;
        data = await validatorUtil.bulkValidateData('validateAfterRead', this, data, benignErrorReporter);
        return data.map(item => {return new <%- nameLc -%>(item) });
      } else {
        throw new Error(`Remote server (${remoteZendroURL}) did not respond with data.`);
      }
    } catch(error){
      //handle caught errors
      errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, remoteZendroURL);
    }
  }

  static async readAllCursor(search, order, pagination, benignErrorReporter){
    let query = `query <%- namePl -%>Connection($search: search<%- nameCp -%>Input $pagination: paginationCursorInput! $order: [order<%- nameCp -%>Input]){
      <%- namePl -%>Connection(search:$search pagination:$pagination order:$order){ edges{cursor node{  <%- idAttribute -%> <%for(var key in attributes){-%> <%=key %>
       <%}-%>} } pageInfo{startCursor endCursor hasPreviousPage hasNextPage  } } }`

    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef( benignErrorReporter );

    try {
      // Send an HTTP request to the remote server
      let response = await axios.post(remoteZendroURL, {query:query, variables: {search: search, order:order, pagination: pagination}});
      //check if remote service returned benign Errors in the response and add them to the benignErrorReporter
      if(helper.isNonEmptyArray(response.data.errors)) {
        benignErrorReporter.reportError(errorHelper.handleRemoteErrors(response.data.errors, remoteZendroURL));
      }
      // STATUS-CODE is 200
      // NO ERROR as such has been detected by the server (Express)
      // check if data was send
      if(response && response.data && response.data.data &&  response.data.data.<%- namePl -%>Connection !== null) {
        let data_edges = response.data.data.<%- namePl -%>Connection.edges;
        let pageInfo = response.data.data.<%- namePl -%>Connection.pageInfo;

        //validate after read
        let nodes = data_edges.map(e => e.node);
        let valid_nodes = await validatorUtil.bulkValidateData('validateAfterRead', this, nodes, benignErrorReporter);

        let nodes_model = valid_nodes.map(e => new <%- nameLc -%>(e));

        let edges = nodes_model.map(temp_node  =>{
          return {
            node: temp_node,
            cursor: temp_node.base64Encode()
          }
        })

        return { edges, pageInfo, <%- namePl -%>: nodes_model };
      } else {
        throw new Error(`Remote server (${remoteZendroURL}) did not respond with data.`);
      }
    } catch(error) {
      //handle caught errors
      errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, remoteZendroURL);
    }
  }

  static async addOne(input, benignErrorReporter){
    //validate input
    await validatorUtil.validateData('validateForCreate', this, input);

    let query = `
            mutation add<%- nameCp _%>(
    <%if(!defaultId){-%>
              $<%=idAttribute%>:ID! <%}-%> <%for(var key in editableAttributes){%>
              $<%=key %>:<%= editableAttributes[key]%><%}-%>
            ){
              add<%- nameCp -%>(<%if(!defaultId){-%>
              <%=idAttribute %>:$<%= idAttribute%> <%}-%> <%for(var key in editableAttributes){%>
              <%=key %>:$<%= key%><%}-%>){
                <%- idAttribute -%>
    <%for(var key in attributes){-%>
                <%=key %>
    <%}-%>
              }
            }`;

    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef( benignErrorReporter );

    try {
      // Send an HTTP request to the remote server
      let response = await axios.post(remoteZendroURL, {query:query, variables:input});
      //check if remote service returned benign Errors in the response and add them to the benignErrorReporter
      if(helper.isNonEmptyArray(response.data.errors)) {
        benignErrorReporter.reportError(errorHelper.handleRemoteErrors(response.data.errors, remoteZendroURL));
      }
      // STATUS-CODE is 200
      // NO ERROR as such has been detected by the server (Express)
      // check if data was send
      if(response && response.data && response.data.data) {
        return new <%- nameLc -%>(response.data.data.add<%- nameCp -%>);
      } else {
        throw new Error(`Remote zendro-server (${remoteZendroURL}) did not respond with data.`);
      }
    } catch(error) {
      //handle caught errors
      errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, remoteZendroURL);
    }
  }

  static async deleteOne(id, benignErrorReporter){
    //validate id
    await validatorUtil.validateData('validateForDelete', this, id);

    let query = `
              mutation
                delete<%- nameCp -%>{
                  delete<%- nameCp -%>(
                    <%- idAttribute -%>: "${id}" )}`;

    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef( benignErrorReporter );

    try {
      // Send an HTTP request to the remote server
      let response = await axios.post(remoteZendroURL, {query: query});
      //check if remote service returned benign Errors in the response and add them to the benignErrorReporter
      if(helper.isNonEmptyArray(response.data.errors)) {
        benignErrorReporter.reportError(errorHelper.handleRemoteErrors(response.data.errors, remoteZendroURL));
      }
      // STATUS-CODE is 200
      // NO ERROR as such has been detected by the server (Express)
      // check if data was send
      if(response && response.data && response.data.data) {
        return response.data.data.delete<%- nameCp -%>;
      } else {
        throw new Error(`Remote zendro-server (${remoteZendroURL}) did not respond with data.`);
      }
    } catch(error) {
      //handle caught errors
      errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, remoteZendroURL);
    }
  }

  static async updateOne(input, benignErrorReporter){
    //validate input
    await validatorUtil.validateData('validateForUpdate', this, input);
    let query = `
            mutation
              update<%- nameCp-%>(
                $<%- idAttribute -%>:ID! <%for(var key in editableAttributes){%>
                $<%=key %>:<%= editableAttributes[key]%> <%}-%>
              ){
                update<%- nameCp-%>(
                  <%- idAttribute -%>:$<%- idAttribute -%> <%for(var key in editableAttributes){%>
                  <%=key %>:$<%= key%> <%}-%>
                ){
                  <%- idAttribute -%> <%for(var key in attributes){%>
                  <%=key %> <%}%>
                }
              }`

    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef( benignErrorReporter );

    try {
      // Send an HTTP request to the remote server
      let response = await axios.post(remoteZendroURL, {query:query, variables:input});
      //check if remote service returned benign Errors in the response and add them to the benignErrorReporter
      if(helper.isNonEmptyArray(response.data.errors)) {
        benignErrorReporter.reportError(errorHelper.handleRemoteErrors(response.data.errors, remoteZendroURL));
      }
      // STATUS-CODE is 200
      // NO ERROR as such has been detected by the server (Express)
      // check if data was send
      if(response && response.data && response.data.data) {
        return new <%- nameLc -%>(response.data.data.update<%- nameCp -%>);
      } else {
        throw new Error(`Remote zendro-server (${remoteZendroURL}) did not respond with data.`);
      }
    } catch(error) {
      //handle caught errors
      errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, remoteZendroURL);
    }
  }

  static async bulkAddCsv(context, benignErrorReporter){
    let tmpFile = path.join(os.tmpdir(), uuidv4()+'.csv');

    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef( benignErrorReporter );

    try {
      let csvRequestMv = await context.request.files.csv_file.mv(tmpFile);
      let query = `mutation {bulkAdd<%- nameCp -%>Csv}`;
      let formData = new FormData();
      formData.append('csv_file', fs.createReadStream(tmpFile));
      formData.append('query', query);

      let response = await axios.post(remoteZendroURL, formData,  {
        headers: formData.getHeaders()
      });
      //check if remote service returned benign Errors in the response and add them to the benignErrorReporter
      if(helper.isNonEmptyArray(response.data.errors)) {
        benignErrorReporter.reportError(errorHelper.handleRemoteErrors(response.data.errors, remoteZendroURL));
      }
      return response.data.data.bulkAdd<%- nameCp -%>Csv;

    } catch(error) {
      //handle caught errors
      errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, remoteZendroURL);
    }
  }

  /**
   * csvTableTemplate - Allows the user to download a template in CSV format with the
   * properties and types of this model.
   *
   * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard
   * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
   * is invoked, the server will include any so reported errors in the final response, i.e. the
   * GraphQL response will have a non empty errors property.
   */
  static async csvTableTemplate(benignErrorReporter){
    let query = `query { csvTableTemplate<%- nameCp-%> }`;
    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef( benignErrorReporter );

    try {
      let response = await axios.post(remoteZendroURL, {query:query});
      //check if remote service returned benign Errors in the response and add them to the benignErrorReporter
      if(helper.isNonEmptyArray(response.data.errors)) {
        benignErrorReporter.reportError(errorHelper.handleRemoteErrors(response.data.errors, remoteZendroURL));
      }
      return response.data.data.csvTableTemplate<%- nameCp-%>;
    } catch(error) {
      //handle caught errors
      errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, remoteZendroURL);
    }
  }

<%# generic_to_one -%>
  <% associations_temp = associationsArguments["generic_to_one"]-%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>

    /**
     * <%=associations_temp[i].name%>Impl - Return associated record.
     *
     * @param  {object} search      Search argument to match the associated record.
     * @param  {object} context     Provided to every resolver holds contextual information like the
     * resquest query and user info.
     * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard
     * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
     * is invoked, the server will include any so reported errors in the final response, i.e. the
     * GraphQL response will have a non empty errors property.
     * @return {type}   Associated record.
     */
    async <%=associations_temp[i].name%>Impl({search}, context, benignErrorReporter){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>Impl() is not implemented');
    }
  <%}-%>
<%# generic_to_many -%>
  <% associations_temp = associationsArguments["generic_to_many"]-%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>

    /**
     * <%=associations_temp[i].name%>FilterImpl - Return certain number, specified in pagination argument,
     * of records associated with the current instance, this records should also holds the condition of search
     * argument, all of them sorted as specified by the order argument.
     *
     * @param  {object} search      Search argument for filtering associated records.
     * @param  {array} order        Type of sorting (ASC, DESC) for each field.
     * @param  {object} pagination  Offset and limit to get the records from and to respectively.
     * @param  {object} context     Provided to every resolver holds contextual information like the
     * resquest query and user info.
     * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard
     * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
     * is invoked, the server will include any so reported errors in the final response, i.e. the
     * GraphQL response will have a non empty errors property.
     * @return {array}    Array of associated records holding conditions specified by search, order and
     * pagination argument.
     */
    async <%=associations_temp[i].name%>FilterImpl({search,order,pagination}, context, benignErrorReporter){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>FilterImpl() is not implemented');
    }

    /**
     * <%=associations_temp[i].name%>ConnectionImpl - Return certain number, specified in pagination argument,
     * of records associated with the current instance, this records should also holds the condition of search
     * argument, all of them sorted as specified by the order argument.
     *
     * @param  {object} search      Search argument for filtering associated records.
     * @param  {array} order        Type of sorting (ASC, DESC) for each field.
     * @param  {object} pagination  Cursor and first (indicatig the number of records to retrieve)
     * arguments to apply cursor-based pagination.
     * @param  {object} context     Provided to every resolver holds contextual information like the
     * resquest query and user info.
     * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard
     * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
     * is invoked, the server will include any so reported errors in the final response, i.e. the
     * GraphQL response will have a non empty errors property.
     * @return {array}    Array of records as grapqhql connections holding conditions specified by search,
     * order and pagination argument.
     */
    async <%=associations_temp[i].name%>ConnectionImpl ({search,order,pagination}, context, benignErrorReporter){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>ConnectionImpl() is not implemented');
    }

    /**
     * countFiltered<%=associations_temp[i].name_cp%>Impl - Count number of associated records that
     * holds the conditions specified in the search argument.
     *
     * @param  {object} {search}    Search argument for filtering associated records.
     * @param  {object} context     Provided to every resolver holds contextual information like the
     * resquest query and user info.
     * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard
     * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
     * is invoked, the server will include any so reported errors in the final response, i.e. the
     * GraphQL response will have a non empty errors property.
     * @return {type}   Number of associated records that holds the conditions specified in the search
     * argument.
     */
    async countFiltered<%=associations_temp[i].name_cp%>Impl({search}, context, benignErrorReporter){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('countFiltered<%- associations_temp[i].name_cp %>Impl() is not implemented');
    }
  <%}-%>

  <%#
  /**
   * Add and remove methods for to-one association where the foreign key
   * is stored in this model and therefore this adapter is the responsible to update the foreign key.
   * Also add and remove methods for generic-to-one and generic-to-many associations.
   */
  -%>
  <%- include('./includes/create-models-zendro-fieldMutations', {op: "add"}); %>
  <%- include('./includes/create-models-zendro-fieldMutations', {op: "remove"}); %>
  <%- include('./includes/create-models-fieldMutations-generic-associations', {op: "add"}); %>
  <%- include('./includes/create-models-fieldMutations-generic-associations', {op: "remove"}); %>
  <%- include('./includes/bulkAssociations-models', {op: "add"}); %>
  <%- include('./includes/bulkAssociations-models', {op: "remove"}); %>


  static get definition(){
    return definition;
  }

  static base64Decode(cursor){
    return Buffer.from(cursor, 'base64').toString('utf-8');
  }

  base64Encode(){
    return Buffer.from(JSON.stringify(this.stripAssociations())).toString('base64');
  }

  stripAssociations(){
    let attributes = Object.keys(<%- nameLc -%>.definition.attributes);
    <%if( defaultId ){-%>attributes.push('<%- idAttribute -%>'); <%}-%>
    let data_values = _.pick(this, attributes);
    return data_values;
  }

  /**
   * idAttribute - Check whether an attribute "internalId" is given in the JSON model. If not the standard "id" is used instead.
   *
   * @return {type} Name of the attribute that functions as an internalId
   */

  static idAttribute() {
    return <%- nameLc -%>.definition.id.name;
  }

  /**
   * idAttributeType - Return the Type of the internalId.
   *
   * @return {type} Type given in the JSON model
   */

  static idAttributeType() {
    return <%- nameLc -%>.definition.id.type;
  }

  /**
   * getIdValue - Get the value of the idAttribute ("id", or "internalId") for an instance of <%- nameLc -%>.
   *
   * @return {type} id value
   */

  getIdValue() {
    return this[<%- nameLc -%>.idAttribute()]
  }
};
