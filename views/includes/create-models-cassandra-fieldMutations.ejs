<%for(let i=0; i < associationsArguments["to_one"].length; i++){-%>
  <% if (associationsArguments["to_one"][i].holdsForeignKey) { -%>
  /**
  * <%- op %>_<%-associationsArguments["to_one"][i].targetKey-%> - field Mutation (model-layer) for to_one associationsArguments to <%- op %> 
  *
  * @param {Id}   <%- idAttribute-%>   IdAttribute of the root model to be updated
  * @param {Id}   <%-associationsArguments["to_one"][i].targetKey-%> Foreign Key (stored in "Me") of the Association to be updated. 
  * @param {BenignErrorReporter} benignErrorReporter Error Reporter used for reporting Errors
  */
  static async <%- op -%>_<%-associationsArguments["to_one"][i].targetKey-%>(<%- idAttribute-%>, <%-associationsArguments["to_one"][i].targetKey-%>, benignErrorReporter) {
    try {
      const mutationCql = `UPDATE "<%- model_name_in_storage -%>" SET <%-associationsArguments["to_one"][i].targetKey-%> = ? WHERE <%- idAttribute -%> = ?`;
      await this.storageHandler.execute(mutationCql, [<% if (op == 'remove') { -%>null<% } else { %><%-associationsArguments["to_one"][i].targetKey-%><%}-%>, <%- idAttribute -%>], {prepare: true});
      const checkCql = `SELECT COUNT(*) FROM "<%- model_name_in_storage -%>" WHERE <%- idAttribute-%> = ?`;
      let result = await this.storageHandler.execute(checkCql, [<%- idAttribute-%>]);
      return parseInt(result.first()["count"]);
    } catch (error) {
      benignErrorReporter.push({
        message: error,
      });
    }
  }
  <%} -%>
<%}-%>

<%for(let i=0; i < associationsArguments["to_many"].length; i++){-%>
  <% if (associationsArguments["to_many"][i].assocThroughArray) { -%>
    /**
    * <%- op %>_<%-associationsArguments["to_many"][i].sourceKey-%> - field Mutation (model-layer) for to_many associationsArguments to <%- op %>
    *
    * @param {Id}   <%- idAttribute-%>   IdAttribute of the root model to be updated
    * @param {Array}   <%-associationsArguments["to_many"][i].sourceKey-%> Array foreign Key (stored in "Me") of the Association to be updated.
    */
    static async <%- op -%>_<%-associationsArguments["to_many"][i].sourceKey-%>(<%- idAttribute-%>, <%-associationsArguments["to_many"][i].sourceKey-%>, benignErrorReporter, handle_inverse = true) {
      //handle inverse association
      if(handle_inverse){
        let promises = [];
        <%-associationsArguments["to_many"][i].sourceKey-%>.forEach( idx =>{
          promises.push(models.<%-associationsArguments["to_many"][i].target_lc-%>.<%- op %>_<%-associationsArguments["to_many"][i].targetKey%>(idx, [`${<%- idAttribute-%>}`], benignErrorReporter, false) );
        });
        await Promise.all(promises);
      }

      let mutation = `UPDATE "<%- model_name_in_storage -%>" SET <%-associationsArguments["to_many"][i].sourceKey-%> = <%-associationsArguments["to_many"][i].sourceKey-%> <% if(op == 'remove'){-%>-<% }else{ %>+<%}-%> ? WHERE <%- idAttribute-%> = ?`
      await this.storageHandler.execute(mutation, [<%-associationsArguments["to_many"][i].sourceKey-%>, <%- idAttribute-%>],{
          prepare: true
      });
    }
  <%} -%>
<%}-%>