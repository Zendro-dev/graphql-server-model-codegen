<%# creates the field Mutations for adding/removing associated records -%>
<%for(let i=0; i < associationsArguments["to_many_through_sql_cross_table"].length; i++){-%>
  /**
  * <%- op %>_<%-associationsArguments["to_many_through_sql_cross_table"][i].name_lc-%> - field Mutation for to_many associations to <%- op %>
  *
  * @param {object} input   Info of input Ids to <%- op %>  the association
  */
  <%- nameLc -%>.prototype.<%- op %>_<%-associationsArguments["to_many_through_sql_cross_table"][i].name_lc-%> = async function(input) {
    await models.<%- nameLc -%>.<%- op %>_<%-associationsArguments["to_many_through_sql_cross_table"][i].targetKey-%>(this, input.<%- op %><%-associationsArguments["to_many_through_sql_cross_table"][i].name_cp-%>);
  }

<%}-%>
<%for(let i=0; i < associationsArguments["to_many"].length; i++){-%>
  /**
  * <%- op %>_<%-associationsArguments["to_many"][i].name_lc-%> - field Mutation for to_many associations to <%- op %>
  * uses bulkAssociate to efficiently update associations
  *
  * @param {object} input   Info of input Ids to <%- op %>  the association
  * @param {BenignErrorReporter} benignErrorReporter Error Reporter used for reporting Errors from remote zendro services
  */
  <%- nameLc -%>.prototype.<%- op %>_<%-associationsArguments["to_many"][i].name_lc-%> = async function(input, benignErrorReporter) {

    <%if(associationsArguments["to_many"][i].assocThroughArray){-%>
      await <%- nameLc -%>.<%- op %>_<%-associationsArguments["to_many"][i].sourceKey%>(this.getIdValue(), input.<%- op %><%-associationsArguments["to_many"][i].name_cp-%>, benignErrorReporter);
      this.<%-associationsArguments["to_many"][i].sourceKey%> = helper.<% if(op === 'remove'){%>differenceIds<%}else{%>unionIds<%}-%>(this.<%-associationsArguments["to_many"][i].sourceKey%>, input.<%- op %><%-associationsArguments["to_many"][i].name_cp-%>);
    <%}else{-%>
    let bulkAssociationInput = input.<%- op %><%-associationsArguments["to_many"][i].name_cp-%>.map(associatedRecordId => {return {<%-associationsArguments["to_many"][i].targetKey-%>: this.getIdValue(), [models.<%-associationsArguments["to_many"][i].target_lc-%>.idAttribute()]: associatedRecordId}});
    await models.<%-associationsArguments["to_many"][i].target_lc-%>.bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-associationsArguments["to_many"][i].target_cp-%>With<%-associationsArguments["to_many"][i].targetKey_cp-%>(bulkAssociationInput, benignErrorReporter);
    <%}-%>
  }

<%}-%>
<%for(let i=0; i < associationsArguments["to_one"].length; i++){-%>
  /**
  * <%- op %>_<%-associationsArguments["to_one"][i].name_lc-%> - field Mutation for to_one associations to <%- op %>
  *
  * @param {object} input   Info of input Ids to <%- op %>  the association
  * @param {BenignErrorReporter} benignErrorReporter Error Reporter used for reporting Errors from remote zendro services
  */
  <%- nameLc -%>.prototype.<%- op %>_<%-associationsArguments["to_one"][i].name_lc-%> = async function(input, benignErrorReporter) {
  <% if (associationsArguments["to_one"][i].holdsForeignKey) { -%>
    <% if (op === 'remove') { -%>
      if(input.<%- op %><%-associationsArguments["to_one"][i].name_cp-%> == this.<%-associationsArguments["to_one"][i].targetKey%>) {
        await <%- nameLc -%>.<%- op %>_<%-associationsArguments["to_one"][i].targetKey-%>(this.getIdValue(), input.<%- op %><%-associationsArguments["to_one"][i].name_cp-%>, benignErrorReporter);
        this.<%-associationsArguments["to_one"][i].targetKey%> = null;
      }
    <%} else { -%>
      <% if (associationsArguments["to_one"][i].type==="one_to_one" && (!storageType.includes("distributed"))) { -%>
        const removed = await <%- nameLc -%>.remove_<%-associationsArguments["to_one"][i].targetKey-%>(null, input.<%- op %><%-associationsArguments["to_one"][i].name_cp-%>, benignErrorReporter);
        if (removed > 0) {
          benignErrorReporter.reportError({
            message: `Hint: update ${removed} existing association(s)!`,
          });
        }  
      <%}-%>
      await <%- nameLc -%>.<%- op %>_<%-associationsArguments["to_one"][i].targetKey-%>(this.getIdValue(), input.<%- op %><%-associationsArguments["to_one"][i].name_cp-%>, benignErrorReporter);
      this.<%-associationsArguments["to_one"][i].targetKey%> = input.<%- op %><%-associationsArguments["to_one"][i].name_cp%>;
    <%}-%>
  <%} else {-%>
    <% if (associationsArguments["to_one"][i].type==="one_to_one" && op === 'add' && (!storageType.includes("distributed"))) { -%>
      const removed = await models.<%-associationsArguments["to_one"][i].target_lc-%>.remove_<%-associationsArguments["to_one"][i].targetKey-%>(null, this.getIdValue(), benignErrorReporter);
      if (removed > 0) {
        benignErrorReporter.reportError({
          message: `Hint: update ${removed} existing association(s)!`,
        });
      } 
    <%}-%>
    await models.<%-associationsArguments["to_one"][i].target_lc-%>.<%- op %>_<%-associationsArguments["to_one"][i].targetKey-%>(input.<%- op %><%-associationsArguments["to_one"][i].name_cp-%>, this.getIdValue(), benignErrorReporter);
  <%}-%>
  }

<%}-%>
<%for(let i=0; i < associationsArguments["generic_to_one"].length; i++){-%>
  <% let generic_to_one_association = associationsArguments["generic_to_one"][i] -%>
  /**
  * <%- op %>_<%-generic_to_one_association.name_lc-%> - field Mutation for generic_to_one associations to <%- op %>
  *
  * @param {object} input   Object with all the current attributes of the <%-name-%> model record to be updated,
  *                         including info of input id to <%- op %> as association.
  * @param {BenignErrorReporter} benignErrorReporter Error Reporter used for reporting Errors from remote zendro services
  */
  <%- nameLc -%>.prototype.<%- op %>_<%-generic_to_one_association.name_lc-%> = async function(input, benignErrorReporter) {
    await <%- nameLc -%>.<%- op %>_<%-generic_to_one_association.name_lc-%>Impl(input, benignErrorReporter);
  }

<%}-%>
<%for(let i=0; i < associationsArguments["generic_to_many"].length; i++){-%>
  <% let generic_to_many_association = associationsArguments["generic_to_many"][i] -%>
  /**
  * <%- op %>_<%-generic_to_many_association.name_lc-%> - field Mutation for generic_to_many associations to <%- op %>
  *
  * @param {object} input   Object with all the current attributes of the <%-name-%> model record to be updated,
  *                         including info of input ids to <%- op %> as associations.
  * @param {BenignErrorReporter} benignErrorReporter Error Reporter used for reporting Errors from remote zendro services
  */
  <%- nameLc -%>.prototype.<%- op %>_<%-generic_to_many_association.name_lc-%> = async function(input, benignErrorReporter) {
    await <%- nameLc -%>.<%- op %>_<%-generic_to_many_association.name_lc-%>Impl(input, benignErrorReporter);
  }

<%}-%>
