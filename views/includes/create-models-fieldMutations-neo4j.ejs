<%for(let i=0; i < associationsArguments["to_one"].length; i++){-%>
    <% if (associationsArguments["to_one"][i].holdsForeignKey) { -%>
      <% if (associationsArguments["to_one"][i].type==="one_to_one") { -%>
      /**
      * <%- op %>_<%-associationsArguments["to_one"][i].targetKey-%> - field Mutation (model-layer) for to_one associationsArguments to <%- op %> 
      *
      * @param {Id}   <%- idAttribute-%>   IdAttribute of the root model to be updated
      * @param {Id}   <%-associationsArguments["to_one"][i].targetKey-%> Foreign Key (stored in "Me") of the Association to be updated. 
      * @param {BenignErrorReporter} benignErrorReporter Error Reporter used for reporting Errors
      */
      static async <%- op -%>_<%-associationsArguments["to_one"][i].targetKey-%>(<%- idAttribute-%>, <%-associationsArguments["to_one"][i].targetKey-%>, benignErrorReporter) {
        const driver = await this.storageHandler;
        const session = driver.session({
          database: config.database,
          defaultAccessMode: neo4j.session.WRITE,
        });
        <% if (op == 'remove') { %>
          let condition = `n.<%-associationsArguments["to_one"][i].targetKey-%> = $source `
          let rel_condition = `b.${models.<%-associationsArguments["to_one"][i].target-%>.idAttribute()} = $target`
          if (<%-idAttribute%>){
            condition += ` AND n.<%-idAttribute%> = $id `
            rel_condition += ` AND a.<%-idAttribute%> = $id `
          }
          let foreignKey = `MATCH (n:<%- nameCp -%> ) WHERE ` + condition;
          
        <% } else { %>
          let foreignKey = `MATCH (n:<%- nameCp -%> ) WHERE n.<%-idAttribute%> = $id `
        <%}-%>
        foreignKey += `SET n.<%-associationsArguments["to_one"][i].targetKey-%> = $target RETURN count(n)`
        
        <% if (op == 'remove') { %>let delete_relationships = `MATCH (a:<%- nameCp -%>)-[r:${"<%-associationsArguments["to_one"][i].name-%>".toUpperCase() + "_EDGE"}]-> (b:<%-associationsArguments["to_one"][i].target_cp-%>) 
          WHERE ` + rel_condition + ` DELETE r`;<% } 
        else { %>let create_relationships = `MATCH (a:<%- nameCp -%>), (b:<%-associationsArguments["to_one"][i].target_cp-%>) 
          WHERE a.<%-idAttribute%> = $id AND b.${models.<%-associationsArguments["to_one"][i].target-%>.idAttribute()} = $target
          CREATE (a)-[r:${"<%-associationsArguments["to_one"][i].name-%>".toUpperCase() + "_EDGE"}]->(b)`<%}-%>

        try{
          <% if (op == 'remove') { %>
          let fkObject = {source: <%-associationsArguments["to_one"][i].targetKey-%>, target: null}
          let relObject = {target: <%-associationsArguments["to_one"][i].targetKey-%>}
          if (<%-idAttribute%>){
            fkObject["id"] = <%-idAttribute%>;
            relObject["id"] = <%-idAttribute%>;
          }
          const result = await session.run(foreignKey, fkObject);
          await session.run(delete_relationships, relObject);
          <% } else { %>
          const result = await session.run(foreignKey, {id: <%-idAttribute%>, target: <%-associationsArguments["to_one"][i].targetKey-%>});
          await session.run(create_relationships, 
          {
            id: <%-idAttribute%>,
            target: <%-associationsArguments["to_one"][i].targetKey-%>,
          })
          <%}-%>
          return result.records[0].get(0);
        } catch (error) {
          benignErrorReporter.reportError({
            message: error
          });
        } finally {
          await session.close();
        }
      }
      <% } else{-%>
      /**
      * <%- op %>_<%-associationsArguments["to_one"][i].targetKey-%> - field Mutation (model-layer) for to_one associationsArguments to <%- op %> 
      *
      * @param {Id}   <%- idAttribute-%>   IdAttribute of the root model to be updated
      * @param {Id}   <%-associationsArguments["to_one"][i].targetKey-%> Foreign Key (stored in "Me") of the Association to be updated. 
      * @param {BenignErrorReporter} benignErrorReporter Error Reporter used for reporting Errors
      */
      static async <%- op -%>_<%-associationsArguments["to_one"][i].targetKey-%>(<%- idAttribute-%>, <%-associationsArguments["to_one"][i].targetKey-%>, benignErrorReporter) {
        const driver = await this.storageHandler;
        const session = driver.session({
          database: config.database,
          defaultAccessMode: neo4j.session.WRITE,
        });
        let foreignKey = `MATCH (n:<%- nameCp -%> ) WHERE n.<%-idAttribute%> = $id 
          SET n.<%-associationsArguments["to_one"][i].targetKey-%> = $target RETURN count(n)`
        
        <% if (op == 'remove') { %>let delete_relationships = `MATCH (a:<%- nameCp -%>)-[r:${"<%-associationsArguments["to_one"][i].name-%>".toUpperCase() + "_EDGE"}]-> (b:<%-associationsArguments["to_one"][i].target_cp-%>) 
          WHERE a.<%-idAttribute%> = $id AND b.${models.<%-associationsArguments["to_one"][i].target-%>.idAttribute()} = $target
          DELETE r`<% } 
        else { %>let create_relationships = `MATCH (a:<%- nameCp -%>), (b:<%-associationsArguments["to_one"][i].target_cp-%>) 
          WHERE a.<%-idAttribute%> = $id AND b.${models.<%-associationsArguments["to_one"][i].target-%>.idAttribute()} = $target
          CREATE (a)-[r:${"<%-associationsArguments["to_one"][i].name-%>".toUpperCase() + "_EDGE"}]->(b)`<%}-%>

        try{
          const result = await session.run(foreignKey, {id: <%-idAttribute%>, target: <% if (op == 'remove') { _%>null<% } else { %><%-associationsArguments["to_one"][i].targetKey-%><%}-%>});
          await session.run(<% if (op == 'remove') { %>delete_relationships<% } else { %>create_relationships<%}-%>, 
          {
            id: <%-idAttribute%>,
            target: <%-associationsArguments["to_one"][i].targetKey-%>,
          })
          return result.records[0].get(0);
        } catch (error) {
          benignErrorReporter.reportError({
            message:error
          });
        } finally {
          await session.close();
        }
      }
      <%} -%>
    <%} -%>
  <%}-%>
  
  <%for(let i=0; i < associationsArguments["to_many"].length; i++){-%>
    <% if (associationsArguments["to_many"][i].assocThroughArray) { -%>
      /**
      * <%- op %>_<%-associationsArguments["to_many"][i].sourceKey-%> - field Mutation (model-layer) for to_many associationsArguments to <%- op %>
      *
      * @param {Id}   <%- idAttribute-%>   IdAttribute of the root model to be updated
      * @param {Array}   <%-associationsArguments["to_many"][i].sourceKey-%> Array foreign Key (stored in "Me") of the Association to be updated.
      */
      static async <%- op -%>_<%-associationsArguments["to_many"][i].sourceKey-%>(<%- idAttribute-%>, <%-associationsArguments["to_many"][i].sourceKey-%>, benignErrorReporter, handle_inverse = true) {
        //handle inverse association
        if(handle_inverse){
          let promises = [];
          <%-associationsArguments["to_many"][i].sourceKey-%>.forEach( idx =>{
            promises.push(models.<%-associationsArguments["to_many"][i].target_lc-%>.<%- op %>_<%-associationsArguments["to_many"][i].targetKey%>(idx, [`${<%- idAttribute-%>}`], benignErrorReporter, false) );
          });
          await Promise.all(promises);
        }
  
        const driver = await this.storageHandler;
        const session = driver.session({
          database: config.database,
          defaultAccessMode: neo4j.session.WRITE,
        });
        let foreignKey = `MATCH (n:<%- nameCp -%> ) WHERE n.<%-idAttribute%> = $id 
          SET n.<%-associationsArguments["to_many"][i].sourceKey-%> = $updated_ids`
        
        <% if (op == 'remove') { %>let delete_relationships = `MATCH (a:<%- nameCp -%>)-[r:${"<%-associationsArguments["to_many"][i].name-%>".toUpperCase() + "_EDGE"}]-> (b:<%-associationsArguments["to_many"][i].target_cp-%>) 
          WHERE a.<%-idAttribute%> = $id AND b.${models.<%-associationsArguments["to_many"][i].target-%>.idAttribute()} IN $source
          DELETE r`<% } 
        else { %>let create_relationships = `MATCH (a:<%- nameCp -%>), (b:<%-associationsArguments["to_many"][i].target_cp-%>) 
          WHERE a.<%-idAttribute%> = $id AND b.${models.<%-associationsArguments["to_many"][i].target-%>.idAttribute()} IN $source
          CREATE (a)-[r:${"<%-associationsArguments["to_many"][i].name-%>".toUpperCase() + "_EDGE"}]->(b)`<%}-%>

        try{
          let record = await this.readById(<%- idAttribute-%>);
          
          if (record!==null){
            let updated_ids = helper.<% if(op === 'remove'){%>differenceIds<%}else{%>unionIds<%}-%>(record.<%-associationsArguments["to_many"][i].sourceKey-%>, <%-associationsArguments["to_many"][i].sourceKey-%>);
            await session.run(foreignKey, {id: <%-idAttribute%>, updated_ids: updated_ids});

            await session.run(<% if (op == 'remove') { %>delete_relationships<% } else { %>create_relationships<%}-%>, 
            {
              id: <%-idAttribute%>,
              source: <%-associationsArguments["to_many"][i].sourceKey-%>,
            })
          }
        } catch (error) {
          throw error;
        } finally {
          await session.close();
        }
      }
    <%} -%>
  <%}-%>