<%for(let i=0; i < associationsArguments["to_one"].length; i++){-%>
    <% if (associationsArguments["to_one"][i].assocThroughArray) { -%>
    /**
    * <%- op %>_<%-associationsArguments["to_one"][i].sourceKey-%> - field Mutation (model-layer) for to_one associationsArguments to <%- op %> 
    *
    * @param {Id}   <%- idAttribute-%>   IdAttribute of the root model to be updated
    * @param {Id}   <%-associationsArguments["to_one"][i].sourceKey-%> Foreign Key (stored in "Me") of the Association to be updated. 
    * @param {BenignErrorReporter} benignErrorReporter Error Reporter used for reporting Errors
    * @param {string} token The token used for authorization
    * @param {boolean} handle_inverse Handle inverse association
    */
    static async <%- op -%>_<%-associationsArguments["to_one"][i].sourceKey-%>(<%- idAttribute-%>, <%-associationsArguments["to_one"][i].sourceKey-%>, benignErrorReporter, token, handle_inverse = true) {
        try {
            //handle inverse association
            if(handle_inverse){
              <%if (associationsArguments["to_one"][i].type==="many_to_one") {-%>
              await models.<%-associationsArguments["to_one"][i].target_lc-%>.<%- op %>_<%-associationsArguments["to_one"][i].targetKey%>(<%-associationsArguments["to_one"][i].sourceKey-%>, [`${<%- idAttribute-%>}`], benignErrorReporter, token, false);
              <%} else if (associationsArguments["to_one"][i].type==="one_to_one") {-%>
              await models.<%-associationsArguments["to_one"][i].target_lc-%>.<%- op %>_<%-associationsArguments["to_one"][i].targetKey%>(<%-associationsArguments["to_one"][i].sourceKey-%>, <%- idAttribute-%>, benignErrorReporter, token, false);
              <%}-%>
            }
            const db = await this.storageHandler;
            const collection = await db.collection("<%- model_name_in_storage -%>");
            const updatedContent = {<%-associationsArguments["to_one"][i].sourceKey-%>: <% if (op === 'remove') 
            { -%>null<% } else { %><%-associationsArguments["to_one"][i].sourceKey-%><%}-%>}
            const response = await collection.updateOne({<%- idAttribute -%>: <%- idAttribute -%><% if (op === 'remove') 
            {-%>,<%-associationsArguments["to_one"][i].sourceKey-%>: <%-associationsArguments["to_one"][i].sourceKey-%> <%}-%>}, {$set: updatedContent});
            if (!response.acknowledged){
                benignErrorReporter.push({
                    message: `Record with ID = ${<%- idAttribute-%>} has not been updated`
                });
            }
            return response.modifiedCount;
        } catch (error) {
            benignErrorReporter.push({
                message:error
            });
        }
    }
    <%} else if (associationsArguments["to_one"][i].holdsForeignKey) { -%>
    /**
    * <%- op %>_<%-associationsArguments["to_one"][i].targetKey-%> - field Mutation (model-layer) for to_one associationsArguments to <%- op %> 
    *
    * @param {Id}   <%- idAttribute-%>   IdAttribute of the root model to be updated
    * @param {Id}   <%-associationsArguments["to_one"][i].targetKey-%> Foreign Key (stored in "Me") of the Association to be updated. 
    * @param {BenignErrorReporter} benignErrorReporter Error Reporter used for reporting Errors
    */
    static async <%- op -%>_<%-associationsArguments["to_one"][i].targetKey-%>(<%- idAttribute-%>, <%-associationsArguments["to_one"][i].targetKey-%>, benignErrorReporter) {
        try {
            const db = await this.storageHandler;
            const collection = await db.collection("<%- model_name_in_storage -%>");
            const updatedContent = {<%-associationsArguments["to_one"][i].targetKey-%>: <% if (op === 'remove') 
            { -%>null<% } else { %><%-associationsArguments["to_one"][i].targetKey-%><%}-%>}
            const response = await collection.updateOne({<%- idAttribute -%>: <%- idAttribute -%><% if (op === 'remove') 
            {-%>,<%-associationsArguments["to_one"][i].targetKey-%>: <%-associationsArguments["to_one"][i].targetKey-%> <%}-%>}, {$set: updatedContent});
            if (!response.acknowledged){
                benignErrorReporter.push({
                    message: `Record with ID = ${<%- idAttribute-%>} has not been updated`
                });
            }
            return response.modifiedCount;
        } catch (error) {
            benignErrorReporter.push({
                message:error
            });
        }
    }
    <%} -%>
<%}-%>
  
<%for(let i=0; i < associationsArguments["to_many"].length; i++){-%>
    <% if (associationsArguments["to_many"][i].assocThroughArray) { -%>
        /**
        * <%- op %>_<%-associationsArguments["to_many"][i].sourceKey-%> - field Mutation (model-layer) for to_many associationsArguments to <%- op %>
        *
        * @param {Id}   <%- idAttribute-%>   IdAttribute of the root model to be updated
        * @param {Array}   <%-associationsArguments["to_many"][i].sourceKey-%> Array foreign Key (stored in "Me") of the Association to be updated.
        * @param {string} token The token used for authorization
        * @param {boolean} handle_inverse Handle inverse association
        */
        static async <%- op -%>_<%-associationsArguments["to_many"][i].sourceKey-%>(<%- idAttribute-%>, <%-associationsArguments["to_many"][i].sourceKey-%>, benignErrorReporter, token, handle_inverse = true) {
            //handle inverse association
            if(handle_inverse){
                let promises = [];
                <%-associationsArguments["to_many"][i].sourceKey-%>.forEach( idx =>{
                    <%if (associationsArguments["to_many"][i].type==="many_to_many") {-%>
                    promises.push(models.<%-associationsArguments["to_many"][i].target_lc-%>.<%- op %>_<%-associationsArguments["to_many"][i].targetKey%>(idx, [`${<%- idAttribute-%>}`], benignErrorReporter, token, false) );
                    <%} else if (associationsArguments["to_many"][i].type==="one_to_many") {-%>
                    promises.push(models.<%-associationsArguments["to_many"][i].target_lc-%>.<%- op %>_<%-associationsArguments["to_many"][i].targetKey%>(idx, <%- idAttribute-%>, benignErrorReporter, token, false) );
                    <%}-%>
                });
                await Promise.all(promises);
            }

            try {
                const db = await this.storageHandler
                const collection = await db.collection("<%- model_name_in_storage -%>")
                let record = await this.readById(<%- idAttribute-%>);
                if (record!==null){
                    let updated_ids = helper.<% if(op === 'remove'){%>differenceIds<%}else{%>unionIds<%}-%>(record.<%-associationsArguments["to_many"][i].sourceKey-%>, <%-associationsArguments["to_many"][i].sourceKey-%>);
                    await collection.updateOne({<%- idAttribute -%>: <%- idAttribute -%>}, {$set:{<%-associationsArguments["to_many"][i].sourceKey-%> :updated_ids}})
                }
            } catch (error) {
                throw error;
            }
        }
    <%} -%>
<%}-%>