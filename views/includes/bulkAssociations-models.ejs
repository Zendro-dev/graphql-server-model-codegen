<%# bulkAssociations functions for model-layer; paramater: op (add or remove)_%> 
<%for(let i=0; i < associationsArguments["to_one"].length; i++){_%>
  <% if (associationsArguments["to_one"][i].holdsForeignKey && associationsArguments["to_one"][i].type!=="one_to_one") { _%>
  /**
   * bulk<% if(op === 'remove'){ %>Dis<% } %>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].targetKey_cp-%> - bulk<% if(op === 'remove'){ %>Dis<% } %>Associaton of given ids
   *
   * @param  {array} bulkAssociationInput Array of associations to <%- op %>
   * @param  {BenignErrorReporter} benignErrorReporter Error Reporter used for reporting Errors from remote zendro services
   * @return {string} returns message on success
   */
    <% if(storageType === 'sql' || storageType === 'sql-adapter'){_%>
      static async bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].targetKey_cp-%>(bulkAssociationInput){
        let mappedForeignKeys = helper.mapForeignKeysToPrimaryKeyArray(bulkAssociationInput, "<%-idAttribute%>", "<%-associationsArguments["to_one"][i].targetKey%>");
        var promises = [];
        mappedForeignKeys.forEach(({<%-associationsArguments["to_one"][i].targetKey%>, <%- idAttribute_%>}) => {promises.push(super.update({
        <%-associationsArguments["to_one"][i].targetKey-%>: <% if (op == 'remove') { _%>null<% } else { %><%-associationsArguments["to_one"][i].targetKey-%><%}-%>
              }, { where: { <%- idAttribute-%>: <%- idAttribute-%><% if (op == 'remove') { _%>,<%-associationsArguments["to_one"][i].targetKey-%>: <%-associationsArguments["to_one"][i].targetKey-%> <%}-%>
              }
          }));
        })
        await Promise.all(promises);
        return "Records successfully updated!"
      }
    <%}_%>
    <% if(storageType === 'distributed-data-model'){-%>
      static async bulk<% if(op === 'remove'){_%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].targetKey_cp-%>(bulkAssociationInput, benignErrorReporter){
        let mappedBulkAssociateInputToAdapters = this.mapBulkAssociationInputToAdapters(bulkAssociationInput);
        var promises = [];
        Object.keys(mappedBulkAssociateInputToAdapters).forEach(responsibleAdapter => {
            promises.push(adapters[responsibleAdapter].bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].targetKey_cp-%>(mappedBulkAssociateInputToAdapters[responsibleAdapter], benignErrorReporter))
        });
        await Promise.all(promises);
        return "Records successfully updated!";
      }
    <%}_%>
    <% if(storageType === 'zendro-webservice-adapter' || storageType === 'ddm-adapter' || storageType === 'zendro-server'){_%>
      static async bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].targetKey_cp-%>(bulkAssociationInput, benignErrorReporter){
        let query = `mutation  bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].targetKey_cp-%>($bulkAssociationInput: [bulkAssociation<%-nameCp-%>With<%-associationsArguments["to_one"][i].targetKey_cp-%>Input]){
          bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].targetKey_cp-%>(bulkAssociationInput: $bulkAssociationInput, skipAssociationsExistenceChecks: true) 
        }`
        try {
            // Send an HTTP request to the remote server
            let response = await axios.post(remoteZendroURL, {
                query: query,
                variables: {bulkAssociationInput: bulkAssociationInput}
            });
            //check if remote service returned benign Errors in the response and add them to the benignErrorReporter
            if (helper.isNonEmptyArray(response.data.errors)) {
                benignErrorReporter.reportError(errorHelper.handleRemoteErrors(response.data.errors, remoteZendroURL));
            }
            // STATUS-CODE is 200
            // NO ERROR as such has been detected by the server (Express)
            // check if data was send

            if (response && response.data && response.data.data) {
                return response.data.data.bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].targetKey_cp-%>;
            } else {
                throw new Error(`Remote zendro-server (${remoteZendroURL}) did not respond with data.`);
            }
        } catch (error) {
            //handle caught errors
            errorHelper.handleCaughtErrorAndBenignErrors(error, benignErrorReporter, remoteZendroURL);
        }
    }
    <%}_%>
    <% if(storageType === 'generic'){_%>
      static async bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].targetKey_cp-%>(bulkAssociationInput, benignErrorReporter){
        /*
        YOUR CODE GOES HERE
        */
        throw new Error('bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].targetKey_cp-%>() is not implemented for model <%- nameLc -%>');
      }
    <%}_%>
    <% if(storageType === 'mongodb' || storageType === 'mongodb-adapter'){_%>
      static async bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].targetKey_cp-%>(bulkAssociationInput, benignErrorReporter){
        let mappedForeignKeys = helper.mapForeignKeysToPrimaryKeyArray(bulkAssociationInput, "<%-idAttribute%>", "<%-associationsArguments["to_one"][i].targetKey%>");
        let collection;
        try {
            const db = await this.storageHandler
            collection = await db.collection("<%-model_name_in_storage-%>")
        } catch (error) {
            throw error;
        }
        let promises = [];
        mappedForeignKeys.forEach(({
            <%-associationsArguments["to_one"][i].targetKey-%>,
            <%-idAttribute%>
        }) => {
            promises.push(collection.updateMany({<%-idAttribute%>:{$in:<%-idAttribute%>}<% if(op === 'remove')
            {%>, <%-associationsArguments["to_one"][i].targetKey-%>: <%-associationsArguments["to_one"][i].targetKey-%> <%}-%>}, {$set:{<%-associationsArguments["to_one"][i].targetKey-%>:<% if(op === 'remove')
            {_%>null<%} else {%><%-associationsArguments["to_one"][i].targetKey-%><%}-%>}}))
        });
        await Promise.all(promises);
        return "Records successfully updated!"
      }
    <%}_%>
    <% if(storageType === 'neo4j' || storageType === 'neo4j-adapter'){_%>
      static async bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].targetKey_cp-%>(bulkAssociationInput, benignErrorReporter){
        let mappedForeignKeys = helper.mapForeignKeysToPrimaryKeyArray(bulkAssociationInput, "<%-idAttribute%>", "<%-associationsArguments["to_one"][i].targetKey%>");

        const driver = await this.storageHandler;
        const session = driver.session({
          database: config.database,
          defaultAccessMode: neo4j.session.WRITE,
        });
        let foreignKey = `MATCH (n:<%- model_name_in_storage -%>) WHERE n.<%-idAttribute%> IN $id 
          SET n.<%-associationsArguments["to_one"][i].targetKey-%> = $target`

        <% if (op == 'remove') { %>let delete_relationships = `MATCH (a:<%- model_name_in_storage -%>)-[r:${"<%-associationsArguments["to_one"][i].name-%>".toUpperCase() + "_EDGE"}]-> (b:<%-associationsArguments["to_one"][i].target_cp-%>) 
          WHERE a.<%-idAttribute%> IN $id AND b.<%-associationsArguments["to_one"][i].targetKey-%> = $target
          DELETE r`<% } 
        else { %>let create_relationships = `MATCH (a:<%- model_name_in_storage -%>), (b:<%-associationsArguments["to_one"][i].target_cp-%>) 
          WHERE a.<%-idAttribute%> IN $id AND b.<%-associationsArguments["to_one"][i].targetKey-%> = $target
          CREATE (a)-[r:${"<%-associationsArguments["to_one"][i].name-%>".toUpperCase() + "_EDGE"}]->(b)`<%}-%>
        
        try {
          for (let { <%-associationsArguments["to_one"][i].targetKey-%>, <%-idAttribute%> } of mappedForeignKeys) {
            await session.run(foreignKey, {id: <%-idAttribute%>, target: <% if (op == 'remove') { _%>null<% } else { %><%-associationsArguments["to_one"][i].targetKey-%><%}-%>})
            await session.run(<% if (op == 'remove') { %>delete_relationships<% } else { %>create_relationships<%}-%>, 
            {
              id: <%-idAttribute%>, 
              target: <%-associationsArguments["to_one"][i].targetKey-%>,
            })
          }
        } catch (error) {
          throw error;
        } finally {
          await session.close();
        }
        
        return "Records successfully updated!"
      }
    <%}_%>
    <% if(storageType === 'cassandra' || storageType === 'cassandra-adapter'){_%>
      static async bulk<% if(op === 'remove'){%>Dis<%}%>Associate<%-nameCp-%>With<%-associationsArguments["to_one"][i].targetKey_cp-%>(bulkAssociationInput, benignErrorReporter){
        let mappedForeignKeys = helper.mapForeignKeysToPrimaryKeyArray(bulkAssociationInput, "<%-idAttribute%>", "<%-associationsArguments["to_one"][i].targetKey%>");
        let promises = [];
        let mutationCql = `UPDATE "<%- model_name_in_storage -%>" SET <%-associationsArguments["to_one"][i].targetKey-%> = ? WHERE <%-idAttribute%> IN ?`
        mappedForeignKeys.forEach(({
            <%-associationsArguments["to_one"][i].targetKey-%>,
            <%-idAttribute%>
        }) => {
            promises.push(this.storageHandler.execute(mutationCql,[<% if (op == 'remove') { _%>null<% } else { %><%-associationsArguments["to_one"][i].targetKey-%><%}-%>, <%-idAttribute%>], {prepare: true}))
        });


        await Promise.all(promises);
        return "Records successfully updated!"
      }
    <%}_%>

  <%}_%>
<%}_%>