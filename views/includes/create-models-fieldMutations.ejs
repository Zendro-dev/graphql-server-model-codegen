<%for(let i=0; i < associationsArguments["to_one"].length; i++){-%>
  <% if (associationsArguments["to_one"][i].holdsForeignKey) { -%>
    /**
    * <%- op %>_<%-associationsArguments["to_one"][i].targetKey-%> - field Mutation (model-layer) for to_one associationsArguments to <%- op %>
    *
    * @param {Id}   <%- idAttribute-%>   IdAttribute of the root model to be updated
    * @param {Id}   <%-associationsArguments["to_one"][i].targetKey-%> Foreign Key (stored in "Me") of the Association to be updated.
    * @param {BenignErrorReporter} benignErrorReporter Error Reporter used for reporting Errors
    */
    static async <%- op -%>_<%-associationsArguments["to_one"][i].targetKey-%>(<%- idAttribute-%>, <%-associationsArguments["to_one"][i].targetKey-%>, benignErrorReporter) {
      try{
        let updated = await <%- nameLc -%> .update({ <%-associationsArguments["to_one"][i].targetKey-%>:  <% if (op == 'remove') { -%>null<% } else { %><%-associationsArguments["to_one"][i].targetKey-%><%}-%>},{where: {<%- idAttribute -%>: <%- idAttribute -%><% if (op == 'remove') { -%>,<%-associationsArguments["to_one"][i].targetKey-%>: <%-associationsArguments["to_one"][i].targetKey-%> <%}-%>}});
        return updated[0];
      } catch (error) {
        benignErrorReporter.reportError({
          message:error
        });
      }
    }
  <%} -%>
<%}-%>
<%for(let i=0; i < associationsArguments["to_many"].length; i++){-%>
  <% if (associationsArguments["to_many"][i].assocThroughArray) { -%>
    /**
    * <%- op %>_<%-associationsArguments["to_many"][i].sourceKey-%> - field Mutation (model-layer) for to_many associationsArguments to <%- op %>
    *
    * @param {Id}   <%- idAttribute-%>   IdAttribute of the root model to be updated
    * @param {Array}   <%-associationsArguments["to_many"][i].sourceKey-%> Array foreign Key (stored in "Me") of the Association to be updated.
    */
    static async <%- op -%>_<%-associationsArguments["to_many"][i].sourceKey-%>(<%- idAttribute-%>, <%-associationsArguments["to_many"][i].sourceKey-%>, benignErrorReporter, handle_inverse = true) {
      //handle inverse association
      if(handle_inverse){
        let promises = [];
        <%-associationsArguments["to_many"][i].sourceKey-%>.forEach( idx =>{
          promises.push(models.<%-associationsArguments["to_many"][i].target_lc-%>.<%- op %>_<%-associationsArguments["to_many"][i].targetKey%>(idx, [`${<%- idAttribute-%>}`], benignErrorReporter, false) );
        });
        await Promise.all(promises);
      }

      let record = await super.findByPk(<%- idAttribute-%>);
      if(record!==null){
        let updated_ids = helper.<% if(op === 'remove'){%>differenceIds<%}else{%>unionIds<%}-%>(JSON.parse(record.<%-associationsArguments["to_many"][i].sourceKey-%>) , <%-associationsArguments["to_many"][i].sourceKey-%>);
        updated_ids = JSON.stringify(updated_ids);
        await record.update( {<%-associationsArguments["to_many"][i].sourceKey-%> :updated_ids} );
      }
    }
  <%} -%>
<%}-%>
<%for(let i=0; i < associationsArguments["to_many_through_sql_cross_table"].length; i++){-%>
  /**
  * <%- op %>_<%-associationsArguments["to_many_through_sql_cross_table"][i].targetKey-%> - field Mutation (model-layer) for to_one associationsArguments to <%- op %>
  *
  * @param {Id}   <%- idAttribute-%>   IdAttribute of the root model to be updated
  * @param {Id}   <%-associationsArguments["to_many_through_sql_cross_table"][i].targetKey-%> Foreign Key (stored in "Me") of the Association to be updated.
  */
  static async <%- op -%>_<%-associationsArguments["to_many_through_sql_cross_table"][i].targetKey-%>(record, <%- op -%><%-associationsArguments["to_many_through_sql_cross_table"][i].name_cp-%>){
    const updated = await this.sequelize.transaction(async (transaction) => {
    return await record.<%-op-%><%-associationsArguments["to_many_through_sql_cross_table"][i].name_cp-%>(<%- op -%><%-associationsArguments["to_many_through_sql_cross_table"][i].name_cp-%>, {transaction: transaction});
    });
    return updated;
  }
<%}-%>
