<%for(let i=0; i < associationsArguments["to_one"].length; i++){-%>
    <% if (associationsArguments["to_one"][i].holdsForeignKey) { -%>
  /**
  * <%- op %>_<%-associationsArguments["to_one"][i].targetKey-%> - field Mutation (model-layer) for to_one associationsArguments to <%- op %>
  *
  * @param {Id}   <%- idAttribute-%>   IdAttribute of the root model to be updated
  * @param {Id}   <%-associationsArguments["to_one"][i].targetKey-%> Foreign Key (stored in "Me") of the Association to be updated.
  * @param {BenignErrorReporter} benignErrorReporter Error Reporter used for reporting Errors from remote zendro services
  */
  static async <%- op -%>_<%-associationsArguments["to_one"][i].targetKey-%>(<%- idAttribute-%>, <%-associationsArguments["to_one"][i].targetKey-%>, benignErrorReporter) {
    try {
      <% if (associationsArguments["to_one"][i].type==="one_to_one") { -%>
      <% if (op == 'add') { -%>
        const removed = await this.remove_<%-associationsArguments["to_one"][i].targetKey-%>(null, <%-associationsArguments["to_one"][i].targetKey-%>, benignErrorReporter);
        if (removed > 0) {
          benignErrorReporter.reportError({
            message: `Hint: update ${removed} existing association(s)!`,
          });
        }  
        let responsibleAdapter = this.adapterForIri(<%- idAttribute-%>);
        return await adapters[responsibleAdapter].add_<%-associationsArguments["to_one"][i].targetKey-%>(<%- idAttribute-%>, <%-associationsArguments["to_one"][i].targetKey-%>, benignErrorReporter);
      <% } else{-%>
        if (<%- idAttribute-%>) {
          let responsibleAdapter = this.adapterForIri(<%- idAttribute-%>);
          return await adapters[responsibleAdapter].remove_<%-associationsArguments["to_one"][i].targetKey-%>(<%- idAttribute-%>, <%-associationsArguments["to_one"][i].targetKey-%>, benignErrorReporter
          );
        } else {
          let num = 0;
          for (let responsibleAdapter of registry) {
            num += await adapters[responsibleAdapter].remove_<%-associationsArguments["to_one"][i].targetKey-%>(null, <%-associationsArguments["to_one"][i].targetKey-%>, benignErrorReporter);
          }
          return num;
        }
      <%} -%>
      <% } else{-%>
      let responsibleAdapter = this.adapterForIri(<%- idAttribute-%>);
      return await adapters[responsibleAdapter].<%- op -%>_<%-associationsArguments["to_one"][i].targetKey-%>(<%- idAttribute-%>, <%-associationsArguments["to_one"][i].targetKey-%>, benignErrorReporter);
      <%} -%>
    } catch (error) {
      benignErrorReporter.reportError({
        message: error,
      });
    }
  }
  <%}-%>
<%}-%>

<%for(let i=0; i < associationsArguments["to_many"].length; i++){-%>
    <% if (associationsArguments["to_many"][i].assocThroughArray) { -%>
  /**
  * <%- op %>_<%-associationsArguments["to_many"][i].sourceKey-%> - field Mutation (model-layer) for to_many associationsArguments to <%- op %>
  *
  * @param {Id}   <%- idAttribute-%>   IdAttribute of the root model to be updated
  * @param {Array}   <%-associationsArguments["to_many"][i].sourceKey-%> Foreign Key (stored in "Me") of the Association to be updated.
  * @param {BenignErrorReporter} benignErrorReporter Error Reporter used for reporting Errors from remote zendro services
  */
  static async <%- op -%>_<%-associationsArguments["to_many"][i].sourceKey-%>(<%- idAttribute-%>, <%-associationsArguments["to_many"][i].sourceKey-%>, benignErrorReporter, handle_inverse = true) {
    let responsibleAdapter = this.adapterForIri(<%- idAttribute-%>);
    return await adapters[responsibleAdapter].<%- op -%>_<%-associationsArguments["to_many"][i].sourceKey-%>(<%- idAttribute-%>, <%-associationsArguments["to_many"][i].sourceKey-%>, benignErrorReporter, handle_inverse);
  }
  <%}-%>
<%}-%>
