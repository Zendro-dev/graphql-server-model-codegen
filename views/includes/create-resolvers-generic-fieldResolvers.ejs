<%#
/**
 * Query resolvers for associations fields for:
 *
 * < generic_to_one >
 *
 * Methods:
 * model.prototype.assoc()
 *
 */
-%>
<%let associations_generic_one = associationsArguments["generic_to_one"]-%>
<% for(let i=0; i < associations_generic_one.length; i++){ -%>
  /**
   * <%- nameLc -%>.prototype.<%=associations_generic_one[i].name%> - Return associated record
   *
   * @param  {object} search    Search argument to match the associated record.
   * @param  {object} context   Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {type}             Associated record.
   */
  <%- nameLc -%>.prototype.<%=associations_generic_one[i].name%> = async function({search}, context){
    if (await checkAuthorization(context, '<%- associations_generic_one[i].target -%>', 'read') === true) {
      helper.checkCountAndReduceRecordsLimit(1, context, "<%=associations_generic_one[i].name%>");
      return await this.<%=associations_generic_one[i].name%>Impl({search}, context, context.benignErrors);
    } else {
        throw new Error("You don't have authorization to perform this action");
    }
  }
<%}-%>
<%#
/**
 * Query resolvers for associations fields for:
 *
 * < generic_to_many >
 *
 * Methods:
 * model.prototype.assocFilter()
 * model.prototype.assocConnection()
 * model.prototype.countFilteredAssoc()
 *
 */
-%>
<% associations_generic_many = associationsArguments["generic_to_many"]-%>
<% for(let i=0; i < associations_generic_many.length; i++){ -%>
  /**
   * <%- nameLc -%>.prototype.<%=associations_generic_many[i].name%>Filter - Check user authorization and return certain
   * number, specified in pagination argument, of records associated with the current instance, this records should also
   * holds the condition of search argument, all of them sorted as specified by the order argument.
   *
   * @param  {object} search      Search argument for filtering associated records.
   * @param  {array}  order       Type of sorting (ASC, DESC) for each field.
   * @param  {object} pagination  Offset and limit to get the records from and to respectively.
   * @param  {object} context     Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {array}              Array of associated records holding conditions specified by search, order and pagination argument.
   */
  <%- nameLc -%>.prototype.<%=associations_generic_many[i].name%>Filter = async function({search,order,pagination}, context){
    if (await checkAuthorization(context, '<%- associations_generic_many[i].target -%>', 'read') === true) {
      helper.checkCountAndReduceRecordsLimit(pagination.limit, context, "<%=associations_generic_many[i].name%>Filter");
      return await this.<%=associations_generic_many[i].name%>FilterImpl({search, order, pagination}, context, context.benignErrors);
    } else {
        throw new Error("You don't have authorization to perform this action");
    }
  }

  /**
   * <%- nameLc -%>.prototype.countFiltered<%=associations_generic_many[i].name_cp%> - Count number of associated records that
   * holds the conditions specified in the search argument.
   *
   * @param  {object} {search}  Search argument for filtering associated records.
   * @param  {object} context   Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {type}             Number of associated records that holds the conditions specified in the search argument.
   */
  <%- nameLc -%>.prototype.countFiltered<%=associations_generic_many[i].name_cp%> = async function({search}, context){
    if (await checkAuthorization(context, '<%- associations_generic_many[i].target -%>', 'read') === true) {
      return await this.countFiltered<%=associations_generic_many[i].name_cp%>Impl({search}, context, context.benignErrors);
    } else {
        throw new Error("You don't have authorization to perform this action");
    }
  }

  /**
   * <%- nameLc -%>.prototype.<%=associations_generic_many[i].name%>Connection - Check user authorization and return
   * certain number, specified in pagination argument, of records associated with the current instance, this records
   * should also holds the condition of search argument, all of them sorted as specified by the order argument.
   *
   * @param  {object} search      Search argument for filtering associated records.
   * @param  {array}  order       Type of sorting (ASC, DESC) for each field.
   * @param  {object} pagination  Cursor and first (indicating the number of records to retrieve) arguments to apply cursor-based pagination.
   * @param  {object} context     Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {array}              Array of records as grapqhql connections holding conditions specified by search, order and pagination argument.
   */
  <%- nameLc -%>.prototype.<%=associations_generic_many[i].name%>Connection = async function({search,order,pagination}, context){
    if (await checkAuthorization(context, '<%- associations_generic_many[i].target -%>', 'read') === true) {
      helper.checkCursorBasedPaginationArgument(pagination);
      let limit = helper.isNotUndefinedAndNotNull(pagination.first) ? pagination.first : pagination.last;
      helper.checkCountAndReduceRecordsLimit(limit, context, "<%=associations_generic_many[i].name%>Connection");
      return await this.<%=associations_generic_many[i].name%>ConnectionImpl({search, order, pagination}, context, context.benignErrors);
    } else {
        throw new Error("You don't have authorization to perform this action");
    }
  }
<%}-%>