const _ = require('lodash');
const path = require('path');
const adapters = require('../adapters/index');
const globals = require('../../config/globals');
const helper = require('../../utils/helper');
const cassandraHelper = require('../../utils/cassandra_helpers');
const models = require(path.join(__dirname, '..', 'index.js'));
const validatorUtil = require('../../utils/validatorUtil');
const errorHelper = require('../../utils/errors');


const definition = <%- definition -%>;

let registry = [ <%- registry.map( x => '"'+x+'"') -%> ];

module.exports = class <%- nameLc -%>{

  /**
   * constructor - Creates an instance of the model
   *
   * @param  {obejct} input    Data for the new instances. Input for each field of the model.
   */

  constructor({<%- idAttribute -%> <%for(var key in attributes){-%>,<%=key-%><%}-%><% if (cassandraRestrictions) { -%>, toke<% } %>}){
      this.<%- idAttribute -%> = <%- idAttribute -%>;
       <%for(var key in attributes){-%>
         this.<%=key-%> =<%=key-%>;
        <%}-%>
        <% if (cassandraRestrictions) { %>this.toke = toke;<% } -%>
  }

  static get name(){
    return "<%- nameLc -%>";
  }

  /**
   * registeredAdapters - Returns an object which has a key for each
   * adapter on adapter/index.js. Each key of the object will have
   *
   * @return {string}     baseUrl from request.
   */
  static get registeredAdapters() {
    return [<%- registry.map( x => '"'+x+'"') %>].reduce( (a,c) => { a[c] = adapters[c]; return a; }, {} );
  }

  static adapterForIri(iri) {
    let responsibleAdapter = registry.filter(adapter => adapters[adapter].recognizeId(iri));
    if (responsibleAdapter.length > 1) {
      throw new Error("IRI has no unique match");
    } else if (responsibleAdapter.length === 0) {
      throw new Error("IRI has no match WS");
    }
    return responsibleAdapter[0];
  }

  /**
   * mapBulkAssociationInputToAdapters - maps the input of a bulkAssociate to the responsible adapters
   * adapter on adapter/index.js. Each key of the object will have
   *
   * @param {Array} bulkAssociationInput Array of "edges" between two records to be associated
   * @return {object} mapped "edge" objects ({<id_model1>: id, <id_model2>:id}) to the adapter responsible for the primary Key
   */
  static mapBulkAssociationInputToAdapters(bulkAssociationInput){
    let mappedInput = {}
    bulkAssociationInput.map((idMap) => {
      let responsibleAdapter = this.adapterForIri(idMap.<%- idAttribute_%>);
      mappedInput[responsibleAdapter] === undefined ? mappedInput[responsibleAdapter] = [idMap] : mappedInput[responsibleAdapter].push(idMap)
    });
    return mappedInput;
  }

  static readById(id, benignErrorReporter, token) {
    if(id!==null){
      let responsibleAdapter = registry.filter( adapter => adapters[adapter].recognizeId(id));

      if(responsibleAdapter.length > 1 ){
        throw new Error("IRI has no unique match");
      }else if(responsibleAdapter.length === 0){
        throw new Error("IRI has no match WS");
      }

      return adapters[responsibleAdapter[0]].readById(id, benignErrorReporter, token).then(result => {
        let item = new <%- nameLc -%>(result);
        return validatorUtil.validateData('validateAfterRead', this, item);
      });
    }
  }

  static countRecords(search, authorizedAdapters, benignErrorReporter, searchAuthorizedAdapters, token){
    let authAdapters = [];
    /**
     * Differentiated cases:
     *    if authorizedAdapters is defined:
     *      - called from resolver.
     *      - authorizedAdapters will no be modified.
     *
     *    if authorizedAdapters is not defined:
     *      - called internally
     *      - authorizedAdapters will be set to registered adapters.
     */
    if(authorizedAdapters === undefined) {
      authAdapters = Object.values(this.registeredAdapters);
    } else {
      authAdapters = Array.from(authorizedAdapters)
    }

    // map the adapters authorized for 'search' to cassandra-adapters. This is needed to pass the 'allowFiltering' parameter to the cassandra-adapter
    let searchAuthAdapters = [];
    if (helper.isNotUndefinedAndNotNull(searchAuthorizedAdapters)) {
      searchAuthAdapters = Array.from(searchAuthorizedAdapters).filter(adapter => adapter.adapterType === 'cassandra-adapter').map(adapter => adapter.adapterName);
    }

    let promises = authAdapters.map( adapter => {
      /**
       * Differentiated cases:
       *   sql-adapter:
       *      resolve with current parameters.
       *
       *   ddm-adapter:
       *   zendro-webservice-adapter:
       *   generic-adapter:
       *      add exclusions to search.excludeAdapterNames parameter.
       */
      switch(adapter.adapterType) {
        case 'ddm-adapter':
        case 'generic-adapter':
          let nsearch = helper.addExclusions(search, adapter.adapterName, Object.values(this.registeredAdapters));
          return adapter.countRecords(nsearch, benignErrorReporter, token);

        case 'sql-adapter':
        case 'mongodb-adapter':
        case 'amazon-s3-adapter':
        case 'trino-adapter':
        case 'presto-adapter':
        case 'neo4j-adapter':
          return adapter.countRecords(search, benignErrorReporter);
        case 'zendro-webservice-adapter':
          return adapter.countRecords(search, benignErrorReporter, token);
        case 'cassandra-adapter':
          return adapter.countRecords(search, benignErrorReporter, searchAuthAdapters.includes(adapter.adapterName));

        case 'default':
          throw new Error(`Adapter type: '${adapter.adapterType}' is not supported`);
      }
    });

    return Promise.allSettled(promises).then(results => {
        return results.reduce((total, current) => {
            //check if current is Error
            if (current.status === 'rejected') {
                benignErrorReporter.push(current.reason);
            }
            //check current result
            else if (current.status === 'fulfilled') {
                total += current.value;
            }
            return total;
        }, 0 );
    });
  }

  static readAllCursor(search, order, pagination, authorizedAdapters, benignErrorReporter, searchAuthorizedAdapters, token) {
    let authAdapters = [];
    /**
     * Differentiated cases:
     *    if authorizedAdapters is defined:
     *      - called from resolver.
     *      - authorizedAdapters will no be modified.
     *
     *    if authorizedAdapters is not defined:
     *      - called internally
     *      - authorizedAdapters will be set to registered adapters.
     */
    if(authorizedAdapters === undefined) {
      authAdapters = Object.values(this.registeredAdapters);
    } else {
      authAdapters = Array.from(authorizedAdapters)
    }

    // map the adapters authorized for 'search' to cassandra-adapters. This is needed to pass the 'allowFiltering' parameter to the cassandra-adapter
    let searchAuthAdapters = [];
    if (helper.isNotUndefinedAndNotNull(searchAuthorizedAdapters)) {
      searchAuthAdapters = Array.from(searchAuthorizedAdapters).filter(adapter => adapter.adapterType === 'cassandra-adapter').map(adapter => adapter.adapterName);
    }

    let isForwardPagination = !pagination || !(pagination.last != undefined);
    let promises = authAdapters.map(adapter => {
      /**
       * Differentiated cases:
       *   sql-adapter:
       *      resolve with current parameters.
       *
       *   ddm-adapter:
       *   zendro-webservice-adapter:
       *   generic-adapter:
       *      add exclusions to search.excludeAdapterNames parameter.
       */
      switch(adapter.adapterType) {
        case 'ddm-adapter':
          let nsearch = helper.addExclusions(search, adapter.adapterName, Object.values(this.registeredAdapters));
          return adapter.readAllCursor(nsearch, order, pagination, benignErrorReporter, token);
        case 'generic-adapter':
        case 'sql-adapter':
        case 'mongodb-adapter':
        case 'amazon-s3-adapter':
        case 'trino-adapter':
        case 'presto-adapter':
        case 'neo4j-adapter':
          return adapter.readAllCursor(search, order, pagination, benignErrorReporter);
        case 'zendro-webservice-adapter': 
          return adapter.readAllCursor(search, order, pagination, benignErrorReporter, token);
        case 'cassandra-adapter':
          return adapter.readAllCursor(search, pagination, benignErrorReporter, searchAuthAdapters.includes(adapter.adapterName));

        default:
          throw new Error(`Adapter type '${adapter.adapterType}' is not supported`);
      }
    });
    let someHasNextPage = false;
    <% if (!cassandraRestrictions) { %>let someHasPreviousPage = false;<% } %>
    return Promise.allSettled(promises)
    //phase 1: reduce
    .then( results => {
      return results.reduce( (total, current)=> {
        //check if current is Error
        if (current.status === 'rejected') {
            benignErrorReporter.push(current.reason);
        }
        //check current
        else if (current.status === 'fulfilled') {
          if (current.value && current.value.pageInfo && current.value.edges) {
              someHasNextPage |= current.value.pageInfo.hasNextPage;
              <% if (!cassandraRestrictions) { %>someHasPreviousPage |= current.value.pageInfo.hasPreviousPage;<% } %>
              total = total.concat(current.value.edges.map(e => e.node));
          }
        }
        return total;
      }, []);
    })
    //phase 2: validate & order & paginate
    .then( async nodes => {
      nodes = await validatorUtil.bulkValidateData('validateAfterRead', this, nodes, benignErrorReporter);
      <%if (!cassandraRestrictions) { %>if(order === undefined ){ order = [{field:"<%- idAttribute -%>", order:'ASC'}]; }<% } %>
      if(pagination === undefined ){ pagination = { first : Math.min(globals.LIMIT_RECORDS, nodes.length)  }}

      <% if (cassandraRestrictions) { %>
      let ordered_records = cassandraHelper.orderCassandraRecords(nodes);
      let paginated_records = helper.paginateRecordsCursor(ordered_records, pagination.limit);
      let hasNextPage = ordered_records.length > pagination.first || someHasNextPage;
      let graphQLConnection = helper.toGraphQLConnectionObject(paginated_records, this, hasNextPage, false, "<%- namePl -%>");
      return graphQLConnection;
      <% } else { %>
      let ordered_records = helper.orderRecords(nodes, order);
      let paginated_records = [];

      if(isForwardPagination){
        paginated_records = helper.paginateRecordsCursor(ordered_records, pagination.first);
      } else {
        paginated_records = helper.paginateRecordsBefore(ordered_records, pagination.last);
      }

      let hasNextPage = ordered_records.length > pagination.first || someHasNextPage;
      let hasPreviousPage = ordered_records.length > pagination.last || someHasPreviousPage;

      let graphQLConnection = helper.toGraphQLConnectionObject(paginated_records, this, hasNextPage, hasPreviousPage, "<%- namePl -%>");
      return graphQLConnection;
      <% } %>
    });
  }

  static assertInputHasId(input) {
    if (! input.<%- idAttribute -%>) {
      throw new Error(`Illegal argument. Provided input requires attribute '<%- idAttribute -%>'.`);
    }
    return true;
  }

  static async addOne(input, benignErrorReporter, token) {
    this.assertInputHasId(input);
    //validate input
    await validatorUtil.validateData('validateForCreate', this, input);
    let responsibleAdapter = this.adapterForIri(input.<%- idAttribute -%>);
    return adapters[responsibleAdapter].addOne(input, benignErrorReporter, token).then(result => new <%- nameLc -%>(result));
  }

  static async deleteOne(id, benignErrorReporter, token) {
    //validate input
    await validatorUtil.validateData('validateForDelete', this, id);
    let responsibleAdapter = this.adapterForIri(id);
    return adapters[responsibleAdapter].deleteOne(id, benignErrorReporter, token);
  }

  static async updateOne(input, benignErrorReporter, token) {
    this.assertInputHasId(input);
    //validate input
    await validatorUtil.validateData('validateForUpdate', this, input);
    let responsibleAdapter = this.adapterForIri(input.<%- idAttribute -%>);
    return adapters[responsibleAdapter].updateOne(input, benignErrorReporter, token).then(result => new <%- nameLc -%>(result));

  }

  /**
   * csvTableTemplate - Allows the user to download a template in CSV format with the
   * properties and types of this model.
   *
   * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard
   * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
   * is invoked, the server will include any so reported errors in the final response, i.e. the
   * GraphQL response will have a non empty errors property.
   */
  static async csvTableTemplate(benignErrorReporter){
      return helper.csvTableTemplate(definition);
  }

<%# generic_to_one -%>
  <% associations_temp = associationsArguments["generic_to_one"]-%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>

    /**
     * <%=associations_temp[i].name%>Impl - Return associated record.
     *
     * @param  {object} search      Search argument to match the associated record.
     * @param  {object} context     Provided to every resolver holds contextual information like the
     * resquest query and user info.
     * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard
     * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
     * is invoked, the server will include any so reported errors in the final response, i.e. the
     * GraphQL response will have a non empty errors property.
     * @return {type}   Associated record.
     */
    async <%=associations_temp[i].name%>Impl({search}, context, benignErrorReporter){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>Impl() is not implemented');
    }
  <%}-%>
<%# generic_to_many -%>
  <% associations_temp = associationsArguments["generic_to_many"]-%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>

    /**
     * <%=associations_temp[i].name%>FilterImpl - Return certain number, specified in pagination argument,
     * of records associated with the current instance, this records should also holds the condition of search
     * argument, all of them sorted as specified by the order argument.
     *
     * @param  {object} search      Search argument for filtering associated records.
     * @param  {array} order        Type of sorting (ASC, DESC) for each field.
     * @param  {object} pagination  Offset and limit to get the records from and to respectively.
     * @param  {object} context     Provided to every resolver holds contextual information like the
     * resquest query and user info.
     * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard
     * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
     * is invoked, the server will include any so reported errors in the final response, i.e. the
     * GraphQL response will have a non empty errors property.
     * @return {array}    Array of associated records holding conditions specified by search, order and
     * pagination argument.
     */
    async <%=associations_temp[i].name%>FilterImpl({search,order,pagination}, context, benignErrorReporter){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>FilterImpl() is not implemented');
    }

    /**
     * <%=associations_temp[i].name%>ConnectionImpl - Return certain number, specified in pagination argument,
     * of records associated with the current instance, this records should also holds the condition of search
     * argument, all of them sorted as specified by the order argument.
     *
     * @param  {object} search      Search argument for filtering associated records.
     * @param  {array} order        Type of sorting (ASC, DESC) for each field.
     * @param  {object} pagination  Cursor and first (indicatig the number of records to retrieve)
     * arguments to apply cursor-based pagination.
     * @param  {object} context     Provided to every resolver holds contextual information like the
     * resquest query and user info.
     * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard
     * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
     * is invoked, the server will include any so reported errors in the final response, i.e. the
     * GraphQL response will have a non empty errors property.
     * @return {array}    Array of records as grapqhql connections holding conditions specified by search,
     * order and pagination argument.
     */
    async <%=associations_temp[i].name%>ConnectionImpl ({search,order,pagination}, context, benignErrorReporter){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>ConnectionImpl() is not implemented');
    }

    /**
     * countFiltered<%=associations_temp[i].name_cp%>Impl - Count number of associated records that
     * holds the conditions specified in the search argument.
     *
     * @param  {object} {search}    Search argument for filtering associated records.
     * @param  {object} context     Provided to every resolver holds contextual information like the
     * resquest query and user info.
     * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard
     * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
     * is invoked, the server will include any so reported errors in the final response, i.e. the
     * GraphQL response will have a non empty errors property.
     * @return {type}   Number of associated records that holds the conditions specified in the search
     * argument.
     */
    async countFiltered<%=associations_temp[i].name_cp%>Impl({search}, context, benignErrorReporter){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('countFiltered<%- associations_temp[i].name_cp %>Impl() is not implemented');
    }
  <%}-%>

  <%#
  /**
   * Add and remove methods for to-one association where the foreign key
   * is stored in this model. Also for generic-to-one and generic-to-many
   * associations.
   */
  _%>
  <%- include('./includes/create-ddm-models-fields-mutations', {op: "add"}); %>
  <%- include('./includes/create-ddm-models-fields-mutations', {op: "remove"}); %>
  <%- include('./includes/create-models-fieldMutations-generic-associations', {op: "add"}); %>
  <%- include('./includes/create-models-fieldMutations-generic-associations', {op: "remove"}); %>
  <%- include('./includes/bulkAssociations-models', {op: "add"}); %>
  <%- include('./includes/bulkAssociations-models', {op: "remove"}); %>

  <%- include('./includes/create-models-functions', {model: nameLc}); %>
}
