const _ = require('lodash');
const globals = require('../../config/globals');
const helper = require('../../utils/helper');

// An exact copy of the the model definition that comes from the .json file
const definition = <%- definition -%>;

module.exports = class <%- nameLc -%>{

  /**
   * constructor - Creates an instance of the generic model <%- nameLc -%>.
   *
   * @param  {obejct} input    Data for the new instances. Input for each field of the model.
   */
  constructor({<%- idAttribute -%> <%for(var key in attributes){-%>,<%=key-%><%}-%>}){
      this.<%- idAttribute -%> = <%- idAttribute -%>;
       <%for(var key in attributes){-%>
         this.<%=key-%> =<%=key-%>;
        <%}-%>
  }

  static get name(){
    return "<%- nameLc -%>";
  }

  static get definition(){
    return definition;
  }

  /**
   * readById - Search for the <%- nameLc -%> record whose id is equal to the @id received as parameter.
   * Returns an instance of this class (<%- nameLc -%>), with all its properties
   * set from the values of the record fetched.
   * 
   * Returned value:
   *    new <%- nameLc -%>(record)
   * 
   * Thrown on:
   *    * No record found.
   *    * Error.
   *    * Operation failed.
   * 
   * where record is an object with all its properties set from the record fetched.
   * @see: constructor() of the class <%- nameLc -%>;
   * 
   * @param  {<%- idAttributeType %>} id The id of the record that needs to be fetched.
   * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard 
   * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
   * is invoked, the server will include any so reported errors in the final response, i.e. the 
   * GraphQL response will have a non empty errors property.
   * @return {<%- nameLc -%>} Instance of <%- nameLc -%> class.
   */
  static async readById( id, benignErrorReporter ){
    
    /*
    YOUR CODE GOES HERE
     */
    throw new Error('readById() is not implemented for model <%- nameLc -%>');
  }

  /**
   * countRecords - Count the number of records of model <%- nameLc -%> that match the filters provided
   * in the @search parameter. Returns the number of records counted.
   * @see: Zendro specifications for search object.
   * 
   * Thrown on:
   *    * Error.
   *    * Operation failed.
   * 
   * @param  {object} search Object with search filters.
   * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard 
   * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
   * is invoked, the server will include any so reported errors in the final response, i.e. the 
   * GraphQL response will have a non empty errors property.
   * @return {int} Number of records counted, that match the search filters.
   */
  static async countRecords(search, benignErrorReporter){

    /*
    YOUR CODE GOES HERE
    */
    throw new Error('countRecords() is not implemented for model <%- nameLc -%>');
  }

  /**
   * readAll - Search for the multiple records that match the filters received
   * in the @search parameter. The final set of records is constrained by the 
   * limit/offset pagination properties received in the @pagination parameter 
   * and ordered by the specifications received in the @order parameter.
   * Returns an array of instances of this class (<%- nameLc -%>), where each instance
   * has its properties set from the values of one of the records fetched.
   * 
   * Returned value:
   *    for each record
   *    array.push( new <%- nameLc -%>(record) )
   * 
   * Thrown on:
   *    * Error.
   *    * Operation failed.
   * 
   * where record is an object with all its properties set from a record fetched.
   * @see: constructor() of the class <%- nameLc -%>;
   * @see: Zendro specifications for limit-offset pagination.
   * @see: Zendro specifications for search and order objects.
   * 
   * @param  {object} search     Object with search filters.
   * @param  {object} order      Object with order specifications.
   * @param  {object} pagination Object with limit/offset pagination properties.
   * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard 
   * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
   * is invoked, the server will include any so reported errors in the final response, i.e. the 
   * GraphQL response will have a non empty errors property.
   * @return {[<%- nameLc -%>]}    Array of instances of <%- nameLc -%> class.
   */
  static async readAll(search, order, pagination, benignErrorReporter){

    /*
    YOUR CODE GOES HERE
    */
    throw new Error('readAll() is not implemented for model <%- nameLc -%>');
  }

  /**
   * readAllCursor - Search for the multiple records that match the filters received
   * in the @search parameter. The final set of records is constrained by the 
   * cursor based pagination properties received in the @pagination parameter 
   * and ordered by the specifications received in the @order parameter.
   * Returns an array of instances of this class (<%- nameLc -%>), where each instance
   * has its properties set from the values of one of the records fetched.
   * 
   * Returned value:
   *    { edges, pageInfo }
   * 
   * Thrown on:
   *    * Error.
   *    * Operation failed.
   * 
   * where record is an object with all its properties set from a record fetched.
   * @see: constructor() of the class <%- nameLc -%>;
   * @see: Zendro specificatons for cursor based pagination.
   * @see: Zendro specifications for search and order objects.
   * 
   * @param  {object} search     Object with search filters.
   * @param  {object} order      Object with order specifications.
   * @param  {object} pagination Object with pagination properties.
   * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard 
   * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
   * is invoked, the server will include any so reported errors in the final response, i.e. the 
   * GraphQL response will have a non empty errors property.
   * @return { edges, pageInfo } Object with edges and pageInfo.
   */
  static async readAllCursor(search, order, pagination, benignErrorReporter){
    //use default BenignErrorReporter if no BenignErrorReporter defined
    benignErrorReporter = errorHelper.getDefaultBenignErrorReporterIfUndef(benignErrorReporter);
    let options = helper.buildCursorBasedGenericOptions(search, order, pagination, this.idAttribute());
    let records = await <%- nameLc -%>.readAll(options['search'], options['order'], options['pagination'], benignErrorReporter);
    // get the first record (if exists) in the opposite direction to determine pageInfo.
    // if no cursor was given there is no need for an extra query as the results will start at the first (or last) page.
    let oppRecords = [];
    if (pagination && (pagination.after || pagination.before)) {
        let oppOptions = helper.buildOppositeSearchGeneric(search, order, pagination, this.idAttribute());
        oppRecords = await <%- nameLc -%>.readAll(oppOptions['search'],oppOptions['order'],oppOptions['pagination'], benignErrorReporter);
    }
    // build the graphql Connection Object
    let edges = helper.buildEdgeObject(records);
    let pageInfo = helper.buildPageInfo(edges, oppRecords, pagination);
    return {edges, pageInfo};
  }

  /**
   * addOne - Creates a new record of model <%- nameLc -%> with the values provided
   * on @input object.
   * Only if record was created successfully, returns an instance of this class 
   * (<%- nameLc -%>), with all its properties set from the new record created.
   * If this function fails to create the new record, should throw an error.
   * 
   * Conventions on input's attributes values.
   *    1. undefined value: attributes with value equal to undefined are set to 
   *       null at creation time.
   *    2. non-existent: attributes not listed on the input are set to null at 
   *       creation time.
   *    3. null: attributes with value equal to null are set to null.
   * 
   * Returned value:
   *    new <%- nameLc -%>(newRecord)
   * 
   * Thrown on:
   *    * Error.
   *    * Operation failed.
   * 
   * where newRecord is an object with all its properties set from the new record created.
   * @see: constructor() of the class <%- nameLc -%>;
   * 
   * @param  {<%- idAttributeType %>} id The id of the record that needs to be fetched.
   * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard 
   * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
   * is invoked, the server will include any so reported errors in the final response, i.e. the 
   * GraphQL response will have a non empty errors property.
   * @return {<%- nameLc -%>} If successfully created, returns an instance of 
   * <%- nameLc -%> class constructed with the new record, otherwise throws an error.
   */
  static async addOne(input, benignErrorReporter){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('addOne() is not implemented for model <%- nameLc -%>');
  }

  /**
   * updateOne - Updates the <%- nameLc -%> record whose id is equal to the value
   * of id attribute: '<%- idAttribute -%>', which should be on received as input.
   * Only if record was updated successfully, returns an instance of this class 
   * (<%- nameLc -%>), with all its properties set from the record updated.
   * If this function fails to update the record, should throw an error.
   * 
   * Conventions on input's attributes values.
   *    1. undefined value: attributes with value equal to undefined are NOT
   *       updated.
   *    2. non-existent: attributes not listed on the input are NOT updated.
   *    3. null: attributes with value equal to null are set to null.
   * 
   * Returned value:
   *    new <%- nameLc -%>(updatedRecord)
   * 
   * Thrown on:
   *    * Error.
   *    * Operation failed.
   * 
   * where updatedRecord is an object with all its properties set from the record updated.
   * @see: constructor() of the class <%- nameLc -%>;
   * 
   * @param  {object} input Input with properties to be updated. The special id 
   * attribute: '<%- idAttribute -%>' should contains the id value of the record
   * that will be updated.
   * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard 
   * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
   * is invoked, the server will include any so reported errors in the final response, i.e. the 
   * GraphQL response will have a non empty errors property.
   * @return {<%- nameLc -%>} If successfully created, returns an instance of 
   * <%- nameLc -%> class constructed with the new record, otherwise throws an error.
   */
  static async updateOne(input, benignErrorReporter){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('updateOne() is not implemented for model <%- nameLc -%>');
  }

  /**
   * deleteOne - Delete the record whose id is equal to the @id received as parameter.
   * Only if record was deleted successfully, returns the id of the deleted record.
   * If this function fails to delete the record, should throw an error.
   * 
   * Thrown on:
   *    * Error.
   *    * Operation failed.
   * 
   * @param  {<%- idAttributeType %>} id The id of the record that will be deleted.
   * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard 
   * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
   * is invoked, the server will include any so reported errors in the final response, i.e. the 
   * GraphQL response will have a non empty errors property.
   * @return {int} id of the record deleted or throws an error if the operation failed.
   */
  static async deleteOne(id, benignErrorReporter){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('deleteOne is not implemented for model <%- nameLc -%>');
  }

  /**
   * bulkAddCsv - Allows the user to bulk-upload a set of records in CSV format.
   *
   * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard 
   * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
   * is invoked, the server will include any so reported errors in the final response, i.e. the 
   * GraphQL response will have a non empty errors property.
   */
  static async bulkAddCsv(context, benignErrorReporter){
    /*
    YOUR CODE GOES HERE
    */
    throw new Error('bulkAddCsv() is not implemented for model <%- nameLc -%>');
  }

  /**
   * csvTableTemplate - Allows the user to download a template in CSV format with the
   * properties and types of this model.
   *
   * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard 
   * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
   * is invoked, the server will include any so reported errors in the final response, i.e. the 
   * GraphQL response will have a non empty errors property.
   */
  static async csvTableTemplate(benignErrorReporter){
      return helper.csvTableTemplate(definition);
  }

<%# generic_to_one -%>
  <% associations_temp = associationsArguments["generic_to_one"]-%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>
    
    /**
     * <%=associations_temp[i].name%>Impl - Return associated record.
     *
     * @param  {object} search      Search argument to match the associated record.
     * @param  {object} context     Provided to every resolver holds contextual information like the
     * resquest query and user info.
     * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard 
     * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
     * is invoked, the server will include any so reported errors in the final response, i.e. the 
     * GraphQL response will have a non empty errors property.
     * @return {type}   Associated record.
     */
    async <%=associations_temp[i].name%>Impl({search}, context, benignErrorReporter){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>Impl() is not implemented');
    }
  <%}-%>
<%# generic_to_many -%>
  <% associations_temp = associationsArguments["generic_to_many"]-%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>

    /**
     * <%=associations_temp[i].name%>FilterImpl - Return certain number, specified in pagination argument, 
     * of records associated with the current instance, this records should also holds the condition of search
     * argument, all of them sorted as specified by the order argument.
     *
     * @param  {object} search      Search argument for filtering associated records.
     * @param  {array} order        Type of sorting (ASC, DESC) for each field.
     * @param  {object} pagination  Offset and limit to get the records from and to respectively.
     * @param  {object} context     Provided to every resolver holds contextual information like the
     * resquest query and user info.
     * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard 
     * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
     * is invoked, the server will include any so reported errors in the final response, i.e. the 
     * GraphQL response will have a non empty errors property.
     * @return {array}    Array of associated records holding conditions specified by search, order and 
     * pagination argument.
     */
    async <%=associations_temp[i].name%>FilterImpl({search,order,pagination}, context, benignErrorReporter){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>FilterImpl() is not implemented');
    }

    /**
     * <%=associations_temp[i].name%>ConnectionImpl - Return certain number, specified in pagination argument, 
     * of records associated with the current instance, this records should also holds the condition of search 
     * argument, all of them sorted as specified by the order argument.
     *
     * @param  {object} search      Search argument for filtering associated records.
     * @param  {array} order        Type of sorting (ASC, DESC) for each field.
     * @param  {object} pagination  Cursor and first (indicatig the number of records to retrieve) 
     * arguments to apply cursor-based pagination.
     * @param  {object} context     Provided to every resolver holds contextual information like the 
     * resquest query and user info.
     * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard 
     * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
     * is invoked, the server will include any so reported errors in the final response, i.e. the 
     * GraphQL response will have a non empty errors property.
     * @return {array}    Array of records as grapqhql connections holding conditions specified by search, 
     * order and pagination argument.
     */
    async <%=associations_temp[i].name%>ConnectionImpl ({search,order,pagination}, context, benignErrorReporter){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('<%=associations_temp[i].name%>ConnectionImpl() is not implemented');
    }

    /**
     * countFiltered<%=associations_temp[i].name_cp%>Impl - Count number of associated records that
     * holds the conditions specified in the search argument.
     *
     * @param  {object} {search}    Search argument for filtering associated records.
     * @param  {object} context     Provided to every resolver holds contextual information like the 
     * resquest query and user info.
     * @param {BenignErrorReporter} benignErrorReporter can be used to generate the standard 
     * GraphQL output {error: ..., data: ...}. If the function reportError of the benignErrorReporter
     * is invoked, the server will include any so reported errors in the final response, i.e. the 
     * GraphQL response will have a non empty errors property.
     * @return {type}   Number of associated records that holds the conditions specified in the search
     * argument.
     */
    async countFiltered<%=associations_temp[i].name_cp%>Impl({search}, context, benignErrorReporter){
      /*
      YOUR CODE GOES HERE
      */
      throw new Error('countFiltered<%- associations_temp[i].name_cp %>Impl() is not implemented');
    }
  <%}-%>

  <%- include('./includes/create-models-fieldMutations-generic', {op: "add"}); %> 
  <%- include('./includes/create-models-fieldMutations-generic', {op: "remove"}); %>
  <%- include('./includes/create-models-fieldMutations-generic-associations', {op: "add"}); %> 
  <%- include('./includes/create-models-fieldMutations-generic-associations', {op: "remove"}); %>
  <%- include('./includes/bulkAssociations-models', {op: "add"}); %>
  <%- include('./includes/bulkAssociations-models', {op: "remove"}); %>

  <%- include('./includes/create-models-functions', {model: nameLc}); %>
};
