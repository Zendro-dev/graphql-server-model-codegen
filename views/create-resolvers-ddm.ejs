/*
    Resolvers for basic CRUD operations
*/

const path = require('path');
const <%-  nameLc  -%> = require(path.join(__dirname, '..', 'models', 'index.js')).<%- nameLc -%>;
const helper = require('../utils/helper');
const checkAuthorization = require('../utils/check-authorization');
const fs = require('fs');
const os = require('os');
const resolvers = require(path.join(__dirname,'index.js'));
const models = require(path.join(__dirname, '..', 'models', 'index.js'));
const globals = require('../config/globals');
const errorHelper = require('../utils/errors');
const validatorUtil = require("../utils/validatorUtil");

<% associations_temp = associationsArguments["to_one"].concat(associationsArguments["to_many"]).concat(associationsArguments["generic_to_one"]).concat(associationsArguments["generic_to_many"])-%>
const associationArgsDef = {
  <% for(let i=0; i < associations_temp.length; i++){ -%>
    <%if( i == associations_temp.length - 1 ){-%>
      'add<%=associations_temp[i].name_cp-%>': '<%=associations_temp[i].target_lc-%>'
    <%}else {-%>
      'add<%=associations_temp[i].name_cp-%>': '<%=associations_temp[i].target_lc-%>',
    <%}-%>
  <%}-%>
}

<%let associations_one = associationsArguments["to_one"]-%>
<% for(let i=0; i < associations_one.length; i++){ -%>
  /**
   * <%- nameLc -%>.prototype.<%=associations_one[i].name%> - Return associated record
   *
   * @param  {object} search       Search argument to match the associated record
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {type}         Associated record
   */
  <%- nameLc -%>.prototype.<%=associations_one[i].name%> = async function({search}, context){
    <% if (associations_one[i].holdsForeignKey) { %>
    if(helper.isNotUndefinedAndNotNull(this.<%=associations_one[i].targetKey%>)){
        if (search === undefined || search === null) {
          return resolvers.readOne<%=associations_one[i].target_cp%>({[models.<%=associations_one[i].target_lc-%>.idAttribute()]: this.<%=associations_one[i].targetKey%>},context)
        } else {
          //build new search filter
          let nsearch = helper.addSearchField({
            "search": search,
            "field": models.<%=associations_one[i].target_lc-%>.idAttribute(),
            "value": this.<%= associations_one[i].targetKey -%>,
            "operator": "eq"
          });
          let found = (await resolvers.<%=associations_one[i].target_lc_pl%>Connection({search: nsearch,  pagination: {first:1}}, context)).edges;
          if (found.length > 0) {
            return found[0].node
          }
          return found;
        }
    }
    <%}else{-%>
        //build new search filter
        let nsearch = helper.addSearchField({
          "search": search,
          "field": "<%=associations_one[i].targetKey%>",
          "value": this.getIdValue(),
          "operator": "eq"
        });

        let found = (await resolvers.<%=associations_one[i].target_lc_pl%>Connection({search: nsearch, pagination: {first:2}}, context)).edges;

        if(found.length > 0) {
          if(found.length > 1){
            context.benignErrors.push(new Error(
              `Not unique "to_one" association Error: Found > 1 <%=associations_one[i].target_lc_pl%> matching <%- nameLc -%> with <%- idAttribute-%> ${this.getIdValue()}. Consider making this a "to_many" association, or using unique constraints, or moving the foreign key into the <%- name -%> model. Returning first <%=associations_one[i].target-%>.`
            ));
          }
          return found[0].node;
        }
        return null;
    <%}-%>
  }
<%}-%>

<% associations_temp = associationsArguments["to_many"]-%>
<% for(let i=0; i < associations_temp.length; i++){ -%>

   /**
   * <%- nameLc -%>.prototype.countFiltered<%=associations_temp[i].name_cp%> - Count number of associated records that holds the conditions specified in the search argument
   *
   * @param  {object} {search} description
   * @param  {object} context  Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {type}          Number of associated records that holds the conditions specified in the search argument
   */
   <%- nameLc -%>.prototype.countFiltered<%=associations_temp[i].name_cp%> = function({search}, context){

     <%if(associations_temp[i].assocThroughArray){%>
        //return 0 if the foreignKey Array is empty, no need to query the database
        if (!Array.isArray(this.<%=associations_temp[i].sourceKey%>) || this.<%=associations_temp[i].sourceKey%>.length === 0 ) {
          return 0;
        }
         let nsearch = helper.addSearchField({
           "search": search,
           "field": models.<%=associations_temp[i].target_lc-%>.idAttribute(),
           "value": this.<%=associations_temp[i].sourceKey%>.join(','),
           "valueType": "Array",
           "operator": "in"
         });
     <%}else{-%>
      //build new search filter
      let nsearch = helper.addSearchField({
        "search": search,
        "field": "<%=associations_temp[i].targetKey%>",
        "value": this.getIdValue(),
        "operator": "eq"
      });
      <%}-%>
      return resolvers.count<%=associations_temp[i].target_cp_pl%>({search: nsearch},context);
  }


  /**
   * <%- nameLc -%>.prototype.<%=associations_temp[i].name%>Connection - Check user authorization and return certain number, specified in pagination argument, of records
   * associated with the current instance, this records should also
   * holds the condition of search argument, all of them sorted as specified by the order argument.
   *
   * @param  {object} search     Search argument for filtering associated records
   * @param  {array} order       Type of sorting (ASC, DESC) for each field
   * @param  {object} pagination Cursor and first(indicatig the number of records to retrieve) arguments to apply cursor-based pagination.
   * @param  {object} context     Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {array}             Array of records as grapqhql connections holding conditions specified by search, order and pagination argument
   */
   <%- nameLc -%>.prototype.<%=associations_temp[i].name%>Connection = function({search,order,pagination}, context){
     <%if(associations_temp[i].assocThroughArray){%>
        //return an empty response if the foreignKey Array is empty, no need to query the database
        if (!Array.isArray(this.<%=associations_temp[i].sourceKey%>) || this.<%=associations_temp[i].sourceKey%>.length === 0 ) {
          return {
            edges: [],
            <%=associations_temp[i].target_lc_pl%>: [],
            pageInfo: {
                startCursor: null,
                endCursor: null,
                hasPreviousPage: false,
                hasNextPage: false
            }
          };
        }
         let nsearch = helper.addSearchField({
           "search": search,
           "field": models.<%=associations_temp[i].target_lc-%>.idAttribute(),
           "value": this.<%=associations_temp[i].sourceKey%>.join(','),
           "valueType": "Array",
           "operator": "in"
         });
     <%}else{-%>
      //build new search filter
      let nsearch = helper.addSearchField({
        "search": search,
        "field": "<%=associations_temp[i].targetKey%>",
        "value": this.getIdValue(),
        "operator": "eq"
      });

      <%}-%>
      return resolvers.<%=associations_temp[i].target_lc_pl%>Connection({search: nsearch,order: order,pagination: pagination},context);
  }
<%}-%>

<%#
/**
 * Section 3.d
 * Query resolvers for associations fields for:
 *
 * < generic_to_one >
 *
 * Methods:
 * model.prototype.assoc()
 *
 */
-%>
<%let associations_generic_one = associationsArguments["generic_to_one"]-%>
<% for(let i=0; i < associations_generic_one.length; i++){ -%>
  /**
   * <%- nameLc -%>.prototype.<%=associations_generic_one[i].name%> - Return associated record
   *
   * @param  {object} search    Search argument to match the associated record.
   * @param  {object} context   Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {type}             Associated record.
   */
  <%- nameLc -%>.prototype.<%=associations_generic_one[i].name%> = async function({search}, context){
    if (await checkAuthorization(context, '<%- associations_generic_one[i].target -%>', 'read') === true) {
      helper.checkCountAndReduceRecordsLimit(1, context, "<%=associations_generic_one[i].name%>");
      return await this.<%=associations_generic_one[i].name%>Impl({search}, context, context.benignErrors);
    } else {
        throw new Error("You don't have authorization to perform this action");
    }
  }
<%}-%>

<%#
/**
 * Section 3.e
 * Query resolvers for associations fields for:
 *
 * < generic_to_many >
 *
 * Methods:
 * model.prototype.assocFilter()
 * model.prototype.assocConnection()
 * model.prototype.countFilteredAssoc()
 *
 */
-%>
<% associations_generic_many = associationsArguments["generic_to_many"]-%>
<% for(let i=0; i < associations_generic_many.length; i++){ -%>
  /**
   * <%- nameLc -%>.prototype.<%=associations_generic_many[i].name%>Filter - Check user authorization and return certain
   * number, specified in pagination argument, of records associated with the current instance, this records should also
   * holds the condition of search argument, all of them sorted as specified by the order argument.
   *
   * @param  {object} search      Search argument for filtering associated records.
   * @param  {array}  order       Type of sorting (ASC, DESC) for each field.
   * @param  {object} pagination  Offset and limit to get the records from and to respectively.
   * @param  {object} context     Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {array}              Array of associated records holding conditions specified by search, order and pagination argument.
   */
  <%- nameLc -%>.prototype.<%=associations_generic_many[i].name%>Filter = async function({search,order,pagination}, context){
    if (await checkAuthorization(context, '<%- associations_generic_many[i].target -%>', 'read') === true) {
      helper.checkCountAndReduceRecordsLimit(pagination.limit, context, "<%=associations_generic_many[i].name%>Filter");
      return await this.<%=associations_generic_many[i].name%>FilterImpl({search, order, pagination}, context, context.benignErrors);
    } else {
        throw new Error("You don't have authorization to perform this action");
    }
  }

  /**
   * <%- nameLc -%>.prototype.countFiltered<%=associations_generic_many[i].name_cp%> - Count number of associated records that
   * holds the conditions specified in the search argument.
   *
   * @param  {object} {search}  Search argument for filtering associated records.
   * @param  {object} context   Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {type}             Number of associated records that holds the conditions specified in the search argument.
   */
  <%- nameLc -%>.prototype.countFiltered<%=associations_generic_many[i].name_cp%> = async function({search}, context){
    if (await checkAuthorization(context, '<%- associations_generic_many[i].target -%>', 'read') === true) {
      return await this.countFiltered<%=associations_generic_many[i].name_cp%>Impl({search}, context, context.benignErrors);
    } else {
        throw new Error("You don't have authorization to perform this action");
    }
  }

  /**
   * <%- nameLc -%>.prototype.<%=associations_generic_many[i].name%>Connection - Check user authorization and return
   * certain number, specified in pagination argument, of records associated with the current instance, this records
   * should also holds the condition of search argument, all of them sorted as specified by the order argument.
   *
   * @param  {object} search      Search argument for filtering associated records.
   * @param  {array}  order       Type of sorting (ASC, DESC) for each field.
   * @param  {object} pagination  Cursor and first (indicating the number of records to retrieve) arguments to apply cursor-based pagination.
   * @param  {object} context     Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {array}              Array of records as grapqhql connections holding conditions specified by search, order and pagination argument.
   */
  <%- nameLc -%>.prototype.<%=associations_generic_many[i].name%>Connection = async function({search,order,pagination}, context){
    if (await checkAuthorization(context, '<%- associations_generic_many[i].target -%>', 'read') === true) {
      helper.checkCursorBasedPaginationArgument(pagination);
      let limit = helper.isNotUndefinedAndNotNull(pagination.first) ? pagination.first : pagination.last;
      helper.checkCountAndReduceRecordsLimit(limit, context, "<%=associations_generic_many[i].name%>Connection");
      return await this.<%=associations_generic_many[i].name%>ConnectionImpl({search, order, pagination}, context, context.benignErrors);
    } else {
        throw new Error("You don't have authorization to perform this action");
    }
  }
<%}-%>

<%#
/**
 * Mutation resolvers for associations fields.
 *
 * These resolvers are implemented by extended the model's protoype
 * with methods to resolve each association related field.
 *
 * Methods:
 * model.prototype.handleAssociations()
 * model.prototype.addAssoc()
 * model.prototype.removeAssoc()
 */
-%>
<%- include('./includes/handleAssociations'); -%>
<%- include('./includes/create-resolvers-fieldMutations', {op: "add"}); -%>
<%- include('./includes/create-resolvers-fieldMutations', {op: "remove"}); -%>

<%#
/**
 * Section 5
 * Local helper fuctions.
 *
 * Functions:
 * countAllAssociatedRecords()
 * validForDeletion()
 */
-%>
/**
 * countAssociatedRecordsWithRejectReaction - Count associated records with reject deletion action
 *
 * @param  {ID} id      Id of the record which the associations will be counted
 * @param  {objec} context Default context by resolver
 * @return {Int}         Number of associated records
 */
async function countAssociatedRecordsWithRejectReaction(id, context ){

  let <%- nameLc %> = await resolvers.readOne<%- nameCp -%>({<%- idAttribute-%>: id}, context);
  //check that record actually exists
  if (<%- nameLc %> === null) throw new Error(`Record with ID = ${id} does not exist`);
  let promises_to_many = [];
  let promises_to_one = [];
  let get_to_many_associated_fk = 0;
<%if(associationsArguments["generic_to_many"].length > 0) {-%>
  let promises_generic_to_many = [];
<%}-%>
<%if(associationsArguments["generic_to_one"].length > 0) {-%>
  let promises_generic_to_one = [];
  <%}-%>

  <%# check associations to_one and to_many are counted in diferent variable -%>
  <%associations_temp = associationsArguments["to_many"] -%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>
    <% if (associations_temp[i].delete_action==='reject'){-%>
      <%if(associations_temp[i].assocThroughArray){%>
        get_to_many_associated_fk += Array.isArray(<%- nameLc %>.<%=associations_temp[i].sourceKey%>) ? <%- nameLc %>.<%=associations_temp[i].sourceKey%>.length : 0;
      <%}else{-%>
        promises_to_many.push(<%- nameLc %>.countFiltered<%=associations_temp[i].name_cp%>({}, context) );
      <%}-%>
    <%}-%>
  <%}-%>
  <%associations_temp = associationsArguments["to_one"] -%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>
    <% if (associations_temp[i].delete_action==='reject'){-%>
    promises_to_one.push(<%- nameLc %>.<%=associations_temp[i].name%>({}, context) );
    <%}-%>
  <%}-%>
  <%associations_temp = associationsArguments["generic_to_many"] -%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>
    <% if (associations_temp[i].delete_action==='reject'){-%>
    promises_generic_to_many.push(<%- nameLc %>.countFiltered<%=associations_temp[i].name_cp%>({}, context) );
    <%}-%>
  <%}-%>
  <%associations_temp = associationsArguments["generic_to_one"] -%>
  <% for(let i=0; i < associations_temp.length; i++){ -%>
    <% if (associations_temp[i].delete_action==='reject'){-%>
    promises_generic_to_one.push(<%- nameLc %>.<%=associations_temp[i].name%>({}, context) );
    <%}-%>
  <%}-%>

  let result_to_many = await Promise.all(promises_to_many);
  let result_to_one = await Promise.all(promises_to_one);
<%if(associationsArguments["generic_to_many"].length > 0) {-%>
  let result_generic_to_many = await Promise.all(promises_generic_to_many);
<%}-%>
<%if(associationsArguments["generic_to_one"].length > 0) {-%>
  let result_generic_to_one = await Promise.all(promises_generic_to_one);
<%}-%>

  let get_to_many_associated = result_to_many.reduce( (accumulator, current_val )=> accumulator + current_val ,  0 );
  let get_to_one_associated = result_to_one.filter( (r, index) => helper.isNotUndefinedAndNotNull(r) ).length;
<%if(associationsArguments["generic_to_many"].length > 0) {-%>
  let get_generic_to_many_associated = result_generic_to_many.reduce( (accumulator, current_val )=> accumulator + current_val ,  0 );
<%}-%>
<%if(associationsArguments["generic_to_one"].length > 0) {-%>
  let get_generic_to_one_associated = result_generic_to_one.filter( (r, index) => helper.isNotUndefinedAndNotNull(r) ).length;
<%}-%>

  return get_to_one_associated + get_to_many_associated_fk + get_to_many_associated <%if(associationsArguments["generic_to_many"].length > 0) {%>+ get_generic_to_many_associated<%}-%><%if(associationsArguments["generic_to_one"].length > 0) {%> + get_generic_to_one_associated<%}%>;
}

/**
 * validForDeletion - Checks wether a record is allowed to be deleted
 *
 * @param  {ID} id      Id of record to check if it can be deleted
 * @param  {object} context Default context by resolver
 * @return {boolean}         True if it is allowed to be deleted and false otherwise
 */
async function validForDeletion(id, context){
  if( await countAssociatedRecordsWithRejectReaction(id, context) > 0 ){
    throw new Error(`<%- name %> with <%- idAttribute -%> ${id} has associated records and is NOT valid for deletion. Please clean up before you delete.`);
  }

  return true;
}

/**
 * updateAssociations - update associations for a given record
 *
 * @param  {ID} id      Id of record
 * @param  {object} context Default context by resolver
 */
const updateAssociations = async (id, context) => {
  const <%-  nameLc  -%>_record = await resolvers.readOne<%- nameCp -%>(
    { <%- idAttribute -%>: id },
    context
  );
  const pagi_first = globals.LIMIT_RECORDS;
  <% for(let i=0; i < associations_one.length; i++){ -%>
  <% if (associations_one[i].delete_action==='update'){-%>
  <% if (associations_one[i].holdsForeignKey) { %>
    const <%=`${associations_one[i].name}_id`%> = <%-  nameLc  -%>_record.<%=associations_one[i].targetKey%>;
    if (<%=`${associations_one[i].name}_id`%>) {
      await resolvers.update<%- nameCp -%>(
        { <%- idAttribute -%>: id, remove<%=associations_one[i].name_cp%>: <%=`${associations_one[i].name}_id`%> },
        context
      );
    }
  <%}else{-%>
    const <%=`${associations_one[i].name}_record`%> = await <%-  nameLc  -%>_record.<%=associations_one[i].name%>({}, context);
    if (<%=`${associations_one[i].name}_record`%>) {
      const <%=`${associations_one[i].name}_id`%> = <%=`${associations_one[i].name}_record`%>[models.<%=associations_one[i].target_lc%>.idAttribute()];
      await resolvers.update<%- nameCp -%>(
        { <%- idAttribute -%>: id, remove<%=associations_one[i].name_cp%>: <%=`${associations_one[i].name}_id`%> },
        context
      );
    }
    <%}-%>
    <%}-%>
  <%}-%>
  
  <% let associations_many = associationsArguments["to_many"]-%>
  <% for(let i=0; i < associations_many.length; i++){ -%>
    <% if (associations_many[i].delete_action==='update'){-%>
    <%if(associations_many[i].assocThroughArray){%>
      const <%=`${associations_many[i].name}_ids`%> = <%-  nameLc  -%>_record.<%=associations_many[i].sourceKey%>;
      if (<%=`${associations_many[i].name}_ids`%> && <%=`${associations_many[i].name}_ids`%>.length > 0) {
        await resolvers.update<%- nameCp -%>(
          { <%- idAttribute -%>: id, remove<%=associations_many[i].name_cp%>: <%=`${associations_many[i].name}_ids`%> },
          context
        );
      }
    <%}else{-%>
      let <%=associations_many[i].name%>_num = await <%-  nameLc  -%>_record.countFiltered<%=associations_many[i].name_cp%>({}, context);
      while (<%=associations_many[i].name%>_num > 0) {
        context.recordsLimit = globals.LIMIT_RECORDS;
        const <%=associations_many[i].name%>_records = await <%-  nameLc  -%>_record.<%=associations_many[i].target_lc_pl%>Connection(
          { pagination: { first: pagi_first } },
          context
        );
        if (<%=associations_many[i].name%>_records) {
          const <%=associations_many[i].name%>_ids = <%=associations_many[i].name%>_records.<%=associations_many[i].target_lc_pl%>.map((x) => x[models.<%=associations_many[i].target_lc%>.idAttribute()]);
          await resolvers.update<%- nameCp -%>(
            { <%- idAttribute -%>: id, remove<%=associations_many[i].name_cp%>: <%=associations_many[i].name%>_ids },
            context
          );
        }
        <%=associations_many[i].name%>_num -= pagi_first;
      }
    <%}-%>
    <%}-%>
  <%}-%>
  <% for(let i=0; i < associations_generic_many.length; i++){ -%>
  <% if (associations_generic_many[i].delete_action==='update'){-%>
    let <%=associations_generic_many[i].name%>_num = await <%-  nameLc  -%>_record.countFiltered<%=associations_generic_many[i].name_cp%>({}, context);
    while (<%=associations_generic_many[i].name%>_num > 0) {
      context.recordsLimit = globals.LIMIT_RECORDS;
      const <%=associations_generic_many[i].name%>_records = await <%-  nameLc  -%>_record.<%=associations_generic_many[i].target_lc_pl%>Connection(
        { pagination: { first: pagi_first } },
        context
      );
      if (<%=associations_generic_many[i].name%>_records) {
        const <%=associations_generic_many[i].name%>_ids = <%=associations_generic_many[i].name%>_records.<%=associations_generic_many[i].target_lc_pl%>.map((x) => x[models.<%=associations_generic_many[i].target_lc%>.idAttribute()]);
        await resolvers.update<%- nameCp -%>(
          { <%- idAttribute -%>: id, remove<%=associations_generic_many[i].name_cp%>: <%=associations_generic_many[i].name%>_ids },
          context
        );
      }
      <%=associations_generic_many[i].name%>_num -= pagi_first;
    }
    <%}-%>
  <%}-%>

  <% for(let i=0; i < associations_generic_one.length; i++){ -%>
    <% if (associations_generic_one[i].delete_action==='update'){-%>
    const <%=`${associations_generic_one[i].name}_record`%> = await <%-  nameLc  -%>_record.<%=associations_generic_one[i].name%>({}, context);
    if (<%=`${associations_generic_one[i].name}_record`%>) {
      const <%=`${associations_generic_one[i].name}_id`%> = <%=`${associations_generic_one[i].name}_record`%>[models.<%=associations_generic_one[i].target_lc%>.idAttribute()];
      await resolvers.update<%- nameCp -%>(
        { <%- idAttribute -%>: id, remove<%=associations_generic_one[i].name_cp%>: <%=`${associations_generic_one[i].name}_id`%> },
        context
      );
    }
    <%}-%>
  <%}-%>
}

module.exports = {

  /**
   * <%- namePl -%>Connection - Check user authorization and return certain number, specified in pagination argument, of records that
   * holds the condition of search argument, all of them sorted as specified by the order argument.
   *
   * @param  {object} search     Search argument for filtering records
   * @param  {array} order       Type of sorting (ASC, DESC) for each field
   * @param  {object} pagination Cursor and first(indicatig the number of records to retrieve) arguments to apply cursor-based pagination.
   * @param  {object} context     Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {array}             Array of records as grapqhql connections holding conditions specified by search, order and pagination argument
   */
  <%- namePl -%>Connection: async function({search, order, pagination}, context){
    // check valid pagination arguments
    helper.checkCursorBasedPaginationArgument(pagination);
    // reduce recordsLimit and check if exceeded
    let limit = helper.isNotUndefinedAndNotNull(pagination.first) ? pagination.first : pagination.last;
    helper.checkCountAndReduceRecordsLimit(limit, context, "<%- namePl -%>Connection");

    //check: adapters
    let registeredAdapters = Object.values(<%- nameLc _%>.registeredAdapters);
    if(registeredAdapters.length === 0) {
      throw new Error('No adapters registered for data model "<%- name %>"');
    }//else

    //exclude adapters
    let adapters = helper.removeExcludedAdapters(search, registeredAdapters);
    if(adapters.length === 0) {
      throw new Error('All adapters was excluded for data model "<%- name %>"');
    }//else

    //check: auth adapters
    let authorizationCheck = await helper.authorizedAdapters(context, adapters, 'read');
    if (authorizationCheck.authorizedAdapters.length > 0) {
      //check adapter authorization Errors
      if (authorizationCheck.authorizationErrors.length > 0) {
        context.benignErrors.push(authorizationCheck.authorizationErrors);
      }
      let searchAuthorizationCheck = await helper.authorizedAdapters(context, adapters, 'search');
      return await <%- nameLc _%>.readAllCursor(search, order, pagination, authorizationCheck.authorizedAdapters, context.benignErrors, searchAuthorizationCheck.authorizedAdapters);
    } else { //adapters not auth || errors
        // else new Error
        if (authorizationCheck.authorizationErrors.length > 0) {
            throw new Error(authorizationCheck.authorizationErrors.reduce((a, c) => `${a}, ${c.message}`));
        } else {
            throw new Error('No available adapters for data model "<%- name %>" ');
        }
    }
  },


  /**
   * readOne<%- nameCp -%> - Check user authorization and return one record with the specified <%- idAttribute -%> in the <%- idAttribute -%> argument.
   *
   * @param  {number} {<%- idAttribute -%>}    <%- idAttribute -%> of the record to retrieve
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {object}         Record with <%- idAttribute -%> requested
   */
  readOne<%- nameCp -%>: async function({<%- idAttribute -%> }, context){
    //check: adapters auth
      let authorizationCheck = await checkAuthorization(context, <%- nameLc _%>.adapterForIri(<%- idAttribute _%>), 'read');
      if (authorizationCheck === true) {
        helper.checkCountAndReduceRecordsLimit(1, context, "readOne<%- nameCp -%>");

        return <%- nameLc _%>.readById(<%- idAttribute _%>, context.benignErrors);
      } else {//adapter not auth
        throw new Error("You don't have authorization to perform this action on adapter");
      }
  },

  /**
   * add<%- nameCp -%> - Check user authorization and creates a new record with data specified in the input argument
   *
   * @param  {object} input   Info of each field to create the new record
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {object}         New record created
   */
  add<%- nameCp -%>: async function(input, context){
    //check: input has idAttribute
    if (! input.<%- idAttribute _%>) {
      throw new Error(`Illegal argument. Provided input requires attribute '<%- idAttribute _%>'.`);
    }

    //check: adapters auth
      let authorizationCheck = await checkAuthorization(context, <%- nameLc _%>.adapterForIri(input.<%- idAttribute _%>), 'create');
      if (authorizationCheck === true) {
        let inputSanitized = helper.sanitizeAssociationArguments(input, [Object.keys(associationArgsDef)]);
         await helper.checkAuthorizationOnAssocArgs(inputSanitized, context, associationArgsDef,['read', 'update'], models);
         await helper.checkAndAdjustRecordLimitForCreateUpdate(inputSanitized, context, associationArgsDef);
         if(!input.skipAssociationsExistenceChecks) {
           await helper.validateAssociationArgsExistence(inputSanitized, context, associationArgsDef);
         }

          let createdRecord = await <%- nameLc _%>.addOne(inputSanitized, context.benignErrors);
          await createdRecord.handleAssociations(inputSanitized, context.benignErrors);
          return createdRecord;
      } else {//adapter not auth
        throw new Error("You don't have authorization to perform this action on adapter");
      }
  },


  /**
   * bulkAdd<%- nameCp -%>Csv - Load csv file of records
   *
   * @param  {string} _       First parameter is not used
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   */
  bulkAdd<%- nameCp -%>Csv: async function(_, context) {
      if (await checkAuthorization(context, '<%- name -%>', 'create') === true) {
        return <%- nameLc -%>.bulkAddCsv(context, context.benignErrors);
      } else {
          throw new Error("You don't have authorization to perform this action");
      }
  },

  /**
   * delete<%- nameCp -%> - Check user authorization and delete a record with the specified <%- idAttribute -%> in the <%- idAttribute -%> argument.
   *
   * @param  {number} {<%- idAttribute -%>}    <%- idAttribute -%> of the record to delete
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {string}         Message indicating if deletion was successfull.
   */
  delete<%- nameCp -%>: async function({<%- idAttribute -%>}, context){
    //check: adapters auth
      let authorizationCheck = await checkAuthorization(context, <%- nameLc _%>.adapterForIri(<%- idAttribute _%>), 'delete');
      if (authorizationCheck === true) {
        if(await validForDeletion(<%- idAttribute -%>, context) ){
          await updateAssociations(<%- idAttribute -%>, context);
          return <%- nameLc _%>.deleteOne(<%- idAttribute _%>, context.benignErrors);
        }
      } else {//adapter not auth
        throw new Error("You don't have authorization to perform this action on adapter");
      }
  },

  /**
   * update<%- nameCp-%> - Check user authorization and update the record specified in the input argument
   *
   * @param  {object} input   record to update and new info to update
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {object}         Updated record
   */
  update<%- nameCp-%>: async function(input, context){
    //check: input has idAttribute
    if (! input.<%- idAttribute _%>) {
      throw new Error(`Illegal argument. Provided input requires attribute '<%- idAttribute _%>'.`);
    }

    //check: adapters auth
      let authorizationCheck = await checkAuthorization(context, <%- nameLc _%>.adapterForIri(input.<%- idAttribute _%>), 'update');
      if (authorizationCheck === true) {
        let inputSanitized = helper.sanitizeAssociationArguments(input, [Object.keys(associationArgsDef)]);
         await helper.checkAuthorizationOnAssocArgs(inputSanitized, context, associationArgsDef,['read', 'update'], models);
         await helper.checkAndAdjustRecordLimitForCreateUpdate(inputSanitized, context, associationArgsDef);
         if(!input.skipAssociationsExistenceChecks) {
           await helper.validateAssociationArgsExistence(inputSanitized, context, associationArgsDef);
         }
         let updatedRecord = await <%- nameLc _%>.updateOne(inputSanitized, context.benignErrors);
         await updatedRecord.handleAssociations(inputSanitized, context.benignErrors);
         return updatedRecord;
      } else {//adapter not auth
        throw new Error("You don't have authorization to perform this action on adapter");
      }
  },

  /**
   * count<%-namePlCp-%> - Counts number of records that holds the conditions specified in the search argument
   *
   * @param  {object} {search} Search argument for filtering records
   * @param  {object} context  Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {number}          Number of records that holds the conditions specified in the search argument
   */

  count<%-namePlCp-%>: async function({search}, context){

    //check: adapters
    let registeredAdapters = Object.values(<%- nameLc _%>.registeredAdapters);
    if(registeredAdapters.length === 0) {
      throw new Error('No adapters registered for data model "<%- name %>"');
    }//else

      //exclude adapters
      let adapters = helper.removeExcludedAdapters(search, registeredAdapters);
      if(adapters.length === 0) {
        throw new Error('All adapters was excluded for data model "<%- name %>"');
      }//else

      //check: auth adapters
      let authorizationCheck = await helper.authorizedAdapters(context, adapters, 'read');
      if (authorizationCheck.authorizedAdapters.length > 0) {
        //check adapter authorization Errors
        if (authorizationCheck.authorizationErrors.length > 0) {
          context.benignErrors.push(authorizationCheck.authorizationErrors);
        }
        let searchAuthorizationCheck = await helper.authorizedAdapters(context, adapters, 'search');
        return await <%- nameLc -%>.countRecords(search, authorizationCheck.authorizedAdapters, context.benignErrors, searchAuthorizationCheck.authorizedAdapters);
      } else { //adapters not auth || errors
          // else new Error
          if (authorizationCheck.authorizationErrors.length > 0) {
              throw new Error(authorizationCheck.authorizationErrors.reduce((a, c) => `${a}, ${c.message}`));
          } else {
              throw new Error('No available adapters for data model "<%- name %>"');
          }
      }
  },

  <%- include('./includes/bulkAssociations-resolvers', {op: "add"}); -%>
  <%- include('./includes/bulkAssociations-resolvers', {op: "remove"}); -%>

  /**
   * csvTableTemplate<%- nameCp-%> - Returns table's template
   *
   * @param  {string} _       First parameter is not used
   * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info.
   * @return {Array}         Strings, one for header and one columns types
   */
  csvTableTemplate<%- nameCp-%>: async function(_, context){
        if (await checkAuthorization(context, '<%- name -%>', 'read') === true) {
            return <%- nameLc -%>.csvTableTemplate(context.benignErrors);
        } else {
            throw new Error("You don't have authorization to perform this action");
        }
  },

  /**
  * validate<%- nameCp -%>ForCreation - Check user authorization and validate input argument for creation.
  *
  * @param  {object} input   Info of each field to create the new record
  * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info
  * @return {boolean}        Validation result
  */
  validate<%- nameCp -%>ForCreation: async (input, context) => {
    //check: input has idAttribute
    if (! input.<%- idAttribute _%>) {
      throw new Error(`Illegal argument. Provided input requires attribute '<%- idAttribute _%>'.`);
    }
    let authorization = await checkAuthorization(context, <%- nameLc _%>.adapterForIri(input.<%- idAttribute _%>), 'read');
    if (authorization === true) {
      let inputSanitized = helper.sanitizeAssociationArguments(input, [
        Object.keys(associationArgsDef),
      ]);

      try {
        if (!input.skipAssociationsExistenceChecks) {
          await helper.validateAssociationArgsExistence(
            inputSanitized,
            context,
            associationArgsDef
          );
        }
        await validatorUtil.validateData(
          "validateForCreate",
          <%- nameLc -%>,
          inputSanitized
        );
        return true;
      } catch (error) {
        context.benignErrors.push(error);
        return false;
      }
    } else {
      throw new Error("You don't have authorization to perform this action");
    }
  },

  /**
  * validate<%- nameCp -%>ForUpdating - Check user authorization and validate input argument for updating.
  *
  * @param  {object} input   Info of each field to create the new record
  * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info
  * @return {boolean}        Validation result
  */
  validate<%- nameCp -%>ForUpdating: async (input, context) => {
    let authorization = await checkAuthorization(context, <%- nameLc _%>.adapterForIri(input.<%- idAttribute _%>), 'read');
    if (authorization === true) {
      let inputSanitized = helper.sanitizeAssociationArguments(input, [
        Object.keys(associationArgsDef),
      ]);

      try {
        if (!input.skipAssociationsExistenceChecks) {
          await helper.validateAssociationArgsExistence(
            inputSanitized,
            context,
            associationArgsDef
          );
        }
        await validatorUtil.validateData(
          "validateForUpdate",
          <%- nameLc -%>,
          inputSanitized
        );
        return true;
      } catch (error) {
        context.benignErrors.push(error);
        return false;
      }
    } else {
      throw new Error("You don't have authorization to perform this action");
    }
  },

  /**
  * validate<%- nameCp -%>ForDeletion - Check user authorization and validate record by ID for deletion.
  *
  * @param  {string} {<%- idAttribute -%>} <%- idAttribute -%> of the record to be validated
  * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info
  * @return {boolean}        Validation result
  */
  validate<%- nameCp -%>ForDeletion: async ({ <%- idAttribute -%> }, context) => {
    if ((await checkAuthorization(context, <%- nameLc _%>.adapterForIri(<%- idAttribute _%>), 'read')) === true) {

      try {
        await validForDeletion(<%- idAttribute -%>, context);
        await validatorUtil.validateData(
          "validateForDelete",
          <%- nameLc -%>,
          <%- idAttribute -%>
        );
        return true;
      } catch (error) {
        context.benignErrors.push(error);
        return false;
      }
    } else {
      throw new Error("You don't have authorization to perform this action");
    }
  },

  /**
  * validate<%- nameCp -%>AfterReading - Check user authorization and validate record by ID after reading.
  *
  * @param  {string} {<%- idAttribute -%>} <%- idAttribute -%> of the record to be validated
  * @param  {object} context Provided to every resolver holds contextual information like the resquest query and user info
  * @return {boolean}        Validation result
  */
  validate<%- nameCp -%>AfterReading: async ({ <%- idAttribute -%> }, context) => {
    if ((await checkAuthorization(context, <%- nameLc _%>.adapterForIri(<%- idAttribute _%>), 'read')) === true) {

      try {
        await validatorUtil.validateData(
          "validateAfterRead",
          <%- nameLc -%>,
          <%- idAttribute -%>
        );
        return true;
      } catch (error) {
        context.benignErrors.push(error);
        return false;
      }
    } else {
      throw new Error("You don't have authorization to perform this action");
    }
  },
}
