'use strict';
const { DOWN_MIGRATION } = require('../config/globals');
const config = require("../config/data_models_storage_config.json");
/**
 * @module - Migrations for neo4j.
 */
module.exports = {

  /**
   * up - Creates indices.
   *
   * @param  {object} zendro initialized zendro object which provides the access to different APIs
   * in zendro layers (resolvers, models, adapters) and enables graphql queries.
   */
  up: async (zendro) => {
    let session;
    try{
        <% if(storageType === 'neo4j'){-%>
        const driver = await zendro.models.<%-nameLc-%>.storageHandler;
        <% } else { %>
        const driver = await zendro.adapters.<%-adapterName-%>.storageHandler;
        <%}-%>
        session = driver.session({database: config[`default-neo4j`].database});
        await session.run(`CREATE INDEX IF NOT EXISTS FOR (n:<%- model_name_in_storage -%>) ON (n.<%- idAttribute -%>)`);
        <%if(indices){ for(let i=0; i< indices.length; i++){-%>
        await session.run(`CREATE INDEX IF NOT EXISTS FOR (n:<%- model_name_in_storage -%>) ON (n.<%= indices[i] %>)`);
        <%}-%>   
        <%}-%>
    } catch (error){
        throw new Error(error);
    } finally {
        await session.close();
    }
  },

  /**
   * down - Drop nodes and indices for a specific label.
   *
   * @param  {object} zendro initialized zendro object which provides the access to different APIs
   * in zendro layers (resolvers, models, adapters) and enables graphql queries.
   */
  down: async (zendro) => {
    let session;
    try{
        <% if(storageType === 'neo4j'){-%>
        const driver = await zendro.models.<%-nameLc-%>.storageHandler;
        <% } else { %>
        const driver = await zendro.adapters.<%-adapterName-%>.storageHandler;
        <%}-%>
        session = driver.session({database: config[`default-neo4j`].database});
        const result = await session.run(`MATCH (n:<%- model_name_in_storage -%>) RETURN COUNT(n)`); 
        const recordsExists = result.records[0].get(0);
        if (recordsExists && !DOWN_MIGRATION) { 
            throw new Error(`You are trying to delete all records of <%-nameLc-%> and its associations. 
                If you are sure about this, set environment variable 'DOWN_MIGRATION' to 'true' 
                and re-execute this down-migration.`); 
        }
        await session.run(`MATCH (n:<%- model_name_in_storage -%>) DETACH DELETE n`);
        await session.run(`DROP INDEX ON :<%- model_name_in_storage -%>(<%- idAttribute -%>)`);
        <%if(indices){ for(let i=0; i< indices.length; i++){-%>
        await session.run(`DROP INDEX ON :<%- model_name_in_storage -%>(<%= indices[i] %> )`);
        <%}-%>  
        <%}-%> 
    } catch (error){
        throw new Error(error);
    } finally {
        await session.close();
    }
  }
};
